
ROV_remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800487c  0800487c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800487c  0800487c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800487c  0800487c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  080048f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080048f4  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afda  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ccc  00000000  00000000  0002b073  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  0002cd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000860  00000000  00000000  0002d688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014d16  00000000  00000000  0002dee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000081c5  00000000  00000000  00042bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000722c0  00000000  00000000  0004adc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd083  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002840  00000000  00000000  000bd100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080047c8 	.word	0x080047c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080047c8 	.word	0x080047c8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f001 fb0b 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 fca4 	bl	8003ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f001 fb23 	bl	80017e2 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f001 faeb 	bl	800178e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000a4 	.word	0x200000a4

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000a4 	.word	0x200000a4

08000210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d101      	bne.n	8000232 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e0be      	b.n	80003b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800023c:	2b00      	cmp	r3, #0
 800023e:	d109      	bne.n	8000254 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f003 fc62 	bl	8003b18 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 faf7 	bl	8000848 <ADC_ConversionStop_Disable>
 800025a:	4603      	mov	r3, r0
 800025c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 8099 	bne.w	800039e <HAL_ADC_Init+0x18e>
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8095 	bne.w	800039e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800027c:	f023 0302 	bic.w	r3, r3, #2
 8000280:	f043 0202 	orr.w	r2, r3, #2
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7b1b      	ldrb	r3, [r3, #12]
 8000296:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000298:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	4313      	orrs	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002a8:	d003      	beq.n	80002b2 <HAL_ADC_Init+0xa2>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d102      	bne.n	80002b8 <HAL_ADC_Init+0xa8>
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	e000      	b.n	80002ba <HAL_ADC_Init+0xaa>
 80002b8:	2300      	movs	r3, #0
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	4313      	orrs	r3, r2
 80002be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	7d1b      	ldrb	r3, [r3, #20]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d119      	bne.n	80002fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b1b      	ldrb	r3, [r3, #12]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d109      	bne.n	80002e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	035a      	lsls	r2, r3, #13
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	4313      	orrs	r3, r2
 80002dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	e00b      	b.n	80002fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e8:	f043 0220 	orr.w	r2, r3, #32
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f4:	f043 0201 	orr.w	r2, r3, #1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	693a      	ldr	r2, [r7, #16]
 800030c:	430a      	orrs	r2, r1
 800030e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <HAL_ADC_Init+0x1a8>)
 8000318:	4013      	ands	r3, r2
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	6812      	ldr	r2, [r2, #0]
 800031e:	68b9      	ldr	r1, [r7, #8]
 8000320:	430b      	orrs	r3, r1
 8000322:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800032c:	d003      	beq.n	8000336 <HAL_ADC_Init+0x126>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d104      	bne.n	8000340 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	3b01      	subs	r3, #1
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000346:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	430a      	orrs	r2, r1
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <HAL_ADC_Init+0x1ac>)
 800035c:	4013      	ands	r3, r2
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	429a      	cmp	r2, r3
 8000362:	d10b      	bne.n	800037c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	f043 0201 	orr.w	r2, r3, #1
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800037a:	e018      	b.n	80003ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	f023 0312 	bic.w	r3, r3, #18
 8000384:	f043 0210 	orr.w	r2, r3, #16
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000390:	f043 0201 	orr.w	r2, r3, #1
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000398:	2301      	movs	r3, #1
 800039a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	e007      	b.n	80003ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a2:	f043 0210 	orr.w	r2, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003aa:	2301      	movs	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	ffe1f7fd 	.word	0xffe1f7fd
 80003bc:	ff1f0efe 	.word	0xff1f0efe

080003c0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003cc:	2300      	movs	r3, #0
 80003ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a64      	ldr	r2, [pc, #400]	; (8000568 <HAL_ADC_Start_DMA+0x1a8>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d004      	beq.n	80003e4 <HAL_ADC_Start_DMA+0x24>
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a63      	ldr	r2, [pc, #396]	; (800056c <HAL_ADC_Start_DMA+0x1ac>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <HAL_ADC_Start_DMA+0x32>
 80003e4:	4b60      	ldr	r3, [pc, #384]	; (8000568 <HAL_ADC_Start_DMA+0x1a8>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	f040 80b3 	bne.w	8000558 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d101      	bne.n	8000400 <HAL_ADC_Start_DMA+0x40>
 80003fc:	2302      	movs	r3, #2
 80003fe:	e0ae      	b.n	800055e <HAL_ADC_Start_DMA+0x19e>
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2201      	movs	r2, #1
 8000404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f000 f9cb 	bl	80007a4 <ADC_Enable>
 800040e:	4603      	mov	r3, r0
 8000410:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000412:	7dfb      	ldrb	r3, [r7, #23]
 8000414:	2b00      	cmp	r3, #0
 8000416:	f040 809a 	bne.w	800054e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800041e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000422:	f023 0301 	bic.w	r3, r3, #1
 8000426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a4e      	ldr	r2, [pc, #312]	; (800056c <HAL_ADC_Start_DMA+0x1ac>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d105      	bne.n	8000444 <HAL_ADC_Start_DMA+0x84>
 8000438:	4b4b      	ldr	r3, [pc, #300]	; (8000568 <HAL_ADC_Start_DMA+0x1a8>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000440:	2b00      	cmp	r3, #0
 8000442:	d115      	bne.n	8000470 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000448:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800045a:	2b00      	cmp	r3, #0
 800045c:	d026      	beq.n	80004ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000462:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000466:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800046e:	e01d      	b.n	80004ac <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000474:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a39      	ldr	r2, [pc, #228]	; (8000568 <HAL_ADC_Start_DMA+0x1a8>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d004      	beq.n	8000490 <HAL_ADC_Start_DMA+0xd0>
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a38      	ldr	r2, [pc, #224]	; (800056c <HAL_ADC_Start_DMA+0x1ac>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d10d      	bne.n	80004ac <HAL_ADC_Start_DMA+0xec>
 8000490:	4b35      	ldr	r3, [pc, #212]	; (8000568 <HAL_ADC_Start_DMA+0x1a8>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000498:	2b00      	cmp	r3, #0
 800049a:	d007      	beq.n	80004ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d006      	beq.n	80004c6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004bc:	f023 0206 	bic.w	r2, r3, #6
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c4:	e002      	b.n	80004cc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	2200      	movs	r2, #0
 80004ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	2200      	movs	r2, #0
 80004d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	6a1b      	ldr	r3, [r3, #32]
 80004d8:	4a25      	ldr	r2, [pc, #148]	; (8000570 <HAL_ADC_Start_DMA+0x1b0>)
 80004da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	6a1b      	ldr	r3, [r3, #32]
 80004e0:	4a24      	ldr	r2, [pc, #144]	; (8000574 <HAL_ADC_Start_DMA+0x1b4>)
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	6a1b      	ldr	r3, [r3, #32]
 80004e8:	4a23      	ldr	r2, [pc, #140]	; (8000578 <HAL_ADC_Start_DMA+0x1b8>)
 80004ea:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f06f 0202 	mvn.w	r2, #2
 80004f4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	689a      	ldr	r2, [r3, #8]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000504:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6a18      	ldr	r0, [r3, #32]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	334c      	adds	r3, #76	; 0x4c
 8000510:	4619      	mov	r1, r3
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f001 f9cb 	bl	80018b0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000524:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000528:	d108      	bne.n	800053c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000538:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800053a:	e00f      	b.n	800055c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	689a      	ldr	r2, [r3, #8]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800054a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800054c:	e006      	b.n	800055c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000556:	e001      	b.n	800055c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000558:	2301      	movs	r3, #1
 800055a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800055c:	7dfb      	ldrb	r3, [r7, #23]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40012400 	.word	0x40012400
 800056c:	40012800 	.word	0x40012800
 8000570:	080008bd 	.word	0x080008bd
 8000574:	08000939 	.word	0x08000939
 8000578:	08000955 	.word	0x08000955

0800057c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
	...

080005b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d101      	bne.n	80005d4 <HAL_ADC_ConfigChannel+0x20>
 80005d0:	2302      	movs	r3, #2
 80005d2:	e0dc      	b.n	800078e <HAL_ADC_ConfigChannel+0x1da>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2201      	movs	r2, #1
 80005d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	2b06      	cmp	r3, #6
 80005e2:	d81c      	bhi.n	800061e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	4613      	mov	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	3b05      	subs	r3, #5
 80005f6:	221f      	movs	r2, #31
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	43db      	mvns	r3, r3
 80005fe:	4019      	ands	r1, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	6818      	ldr	r0, [r3, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	4613      	mov	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	3b05      	subs	r3, #5
 8000610:	fa00 f203 	lsl.w	r2, r0, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	430a      	orrs	r2, r1
 800061a:	635a      	str	r2, [r3, #52]	; 0x34
 800061c:	e03c      	b.n	8000698 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	2b0c      	cmp	r3, #12
 8000624:	d81c      	bhi.n	8000660 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	4613      	mov	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	3b23      	subs	r3, #35	; 0x23
 8000638:	221f      	movs	r2, #31
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	43db      	mvns	r3, r3
 8000640:	4019      	ands	r1, r3
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	685a      	ldr	r2, [r3, #4]
 800064a:	4613      	mov	r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4413      	add	r3, r2
 8000650:	3b23      	subs	r3, #35	; 0x23
 8000652:	fa00 f203 	lsl.w	r2, r0, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	430a      	orrs	r2, r1
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
 800065e:	e01b      	b.n	8000698 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685a      	ldr	r2, [r3, #4]
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	3b41      	subs	r3, #65	; 0x41
 8000672:	221f      	movs	r2, #31
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	43db      	mvns	r3, r3
 800067a:	4019      	ands	r1, r3
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	4613      	mov	r3, r2
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	4413      	add	r3, r2
 800068a:	3b41      	subs	r3, #65	; 0x41
 800068c:	fa00 f203 	lsl.w	r2, r0, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	430a      	orrs	r2, r1
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b09      	cmp	r3, #9
 800069e:	d91c      	bls.n	80006da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	68d9      	ldr	r1, [r3, #12]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	3b1e      	subs	r3, #30
 80006b2:	2207      	movs	r2, #7
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	43db      	mvns	r3, r3
 80006ba:	4019      	ands	r1, r3
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	6898      	ldr	r0, [r3, #8]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	3b1e      	subs	r3, #30
 80006cc:	fa00 f203 	lsl.w	r2, r0, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	e019      	b.n	800070e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6919      	ldr	r1, [r3, #16]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4613      	mov	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	2207      	movs	r2, #7
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	43db      	mvns	r3, r3
 80006f2:	4019      	ands	r1, r3
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	6898      	ldr	r0, [r3, #8]
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4613      	mov	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	4413      	add	r3, r2
 8000702:	fa00 f203 	lsl.w	r2, r0, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	430a      	orrs	r2, r1
 800070c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b10      	cmp	r3, #16
 8000714:	d003      	beq.n	800071e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800071a:	2b11      	cmp	r3, #17
 800071c:	d132      	bne.n	8000784 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a1d      	ldr	r2, [pc, #116]	; (8000798 <HAL_ADC_ConfigChannel+0x1e4>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d125      	bne.n	8000774 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000732:	2b00      	cmp	r3, #0
 8000734:	d126      	bne.n	8000784 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000744:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b10      	cmp	r3, #16
 800074c:	d11a      	bne.n	8000784 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <HAL_ADC_ConfigChannel+0x1e8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000754:	fba2 2303 	umull	r2, r3, r2, r3
 8000758:	0c9a      	lsrs	r2, r3, #18
 800075a:	4613      	mov	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000764:	e002      	b.n	800076c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	3b01      	subs	r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f9      	bne.n	8000766 <HAL_ADC_ConfigChannel+0x1b2>
 8000772:	e007      	b.n	8000784 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000778:	f043 0220 	orr.w	r2, r3, #32
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800078c:	7bfb      	ldrb	r3, [r7, #15]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	40012400 	.word	0x40012400
 800079c:	20000008 	.word	0x20000008
 80007a0:	431bde83 	.word	0x431bde83

080007a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d039      	beq.n	8000836 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	689a      	ldr	r2, [r3, #8]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f042 0201 	orr.w	r2, r2, #1
 80007d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <ADC_Enable+0x9c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <ADC_Enable+0xa0>)
 80007d8:	fba2 2303 	umull	r2, r3, r2, r3
 80007dc:	0c9b      	lsrs	r3, r3, #18
 80007de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80007e0:	e002      	b.n	80007e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f9      	bne.n	80007e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80007ee:	f7ff fd05 	bl	80001fc <HAL_GetTick>
 80007f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80007f4:	e018      	b.n	8000828 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80007f6:	f7ff fd01 	bl	80001fc <HAL_GetTick>
 80007fa:	4602      	mov	r2, r0
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	2b02      	cmp	r3, #2
 8000802:	d911      	bls.n	8000828 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000808:	f043 0210 	orr.w	r2, r3, #16
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000814:	f043 0201 	orr.w	r2, r3, #1
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000824:	2301      	movs	r3, #1
 8000826:	e007      	b.n	8000838 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	2b01      	cmp	r3, #1
 8000834:	d1df      	bne.n	80007f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000008 	.word	0x20000008
 8000844:	431bde83 	.word	0x431bde83

08000848 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	2b01      	cmp	r3, #1
 8000860:	d127      	bne.n	80008b2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	689a      	ldr	r2, [r3, #8]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f022 0201 	bic.w	r2, r2, #1
 8000870:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000872:	f7ff fcc3 	bl	80001fc <HAL_GetTick>
 8000876:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000878:	e014      	b.n	80008a4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800087a:	f7ff fcbf 	bl	80001fc <HAL_GetTick>
 800087e:	4602      	mov	r2, r0
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	2b02      	cmp	r3, #2
 8000886:	d90d      	bls.n	80008a4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088c:	f043 0210 	orr.w	r2, r3, #16
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000898:	f043 0201 	orr.w	r2, r3, #1
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e007      	b.n	80008b4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d0e3      	beq.n	800087a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d127      	bne.n	8000926 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80008ec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80008f0:	d115      	bne.n	800091e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d111      	bne.n	800091e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d105      	bne.n	800091e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000916:	f043 0201 	orr.w	r2, r3, #1
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	f7ff fe2c 	bl	800057c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000924:	e004      	b.n	8000930 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	4798      	blx	r3
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000944:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f7ff fe21 	bl	800058e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000960:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000966:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000972:	f043 0204 	orr.w	r2, r3, #4
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f7ff fe10 	bl	80005a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e0ed      	b.n	8000b76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d102      	bne.n	80009ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f003 f920 	bl	8003bec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f022 0202 	bic.w	r2, r2, #2
 80009ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009bc:	f7ff fc1e 	bl	80001fc <HAL_GetTick>
 80009c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009c2:	e012      	b.n	80009ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009c4:	f7ff fc1a 	bl	80001fc <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b0a      	cmp	r3, #10
 80009d0:	d90b      	bls.n	80009ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2205      	movs	r2, #5
 80009e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e0c5      	b.n	8000b76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1e5      	bne.n	80009c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f042 0201 	orr.w	r2, r2, #1
 8000a06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a08:	f7ff fbf8 	bl	80001fc <HAL_GetTick>
 8000a0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a0e:	e012      	b.n	8000a36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a10:	f7ff fbf4 	bl	80001fc <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	2b0a      	cmp	r3, #10
 8000a1c:	d90b      	bls.n	8000a36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e09f      	b.n	8000b76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0e5      	beq.n	8000a10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7e1b      	ldrb	r3, [r3, #24]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d108      	bne.n	8000a5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	e007      	b.n	8000a6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7e5b      	ldrb	r3, [r3, #25]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d108      	bne.n	8000a88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	e007      	b.n	8000a98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	7e9b      	ldrb	r3, [r3, #26]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d108      	bne.n	8000ab2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f042 0220 	orr.w	r2, r2, #32
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e007      	b.n	8000ac2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f022 0220 	bic.w	r2, r2, #32
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7edb      	ldrb	r3, [r3, #27]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d108      	bne.n	8000adc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f022 0210 	bic.w	r2, r2, #16
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	e007      	b.n	8000aec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f042 0210 	orr.w	r2, r2, #16
 8000aea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7f1b      	ldrb	r3, [r3, #28]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d108      	bne.n	8000b06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f042 0208 	orr.w	r2, r2, #8
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	e007      	b.n	8000b16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f022 0208 	bic.w	r2, r2, #8
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7f5b      	ldrb	r3, [r3, #29]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d108      	bne.n	8000b30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f042 0204 	orr.w	r2, r2, #4
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	e007      	b.n	8000b40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f022 0204 	bic.w	r2, r2, #4
 8000b3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	ea42 0103 	orr.w	r1, r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	1e5a      	subs	r2, r3, #1
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	430a      	orrs	r2, r1
 8000b64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b087      	sub	sp, #28
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b94:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b96:	7cfb      	ldrb	r3, [r7, #19]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d003      	beq.n	8000ba4 <HAL_CAN_ConfigFilter+0x26>
 8000b9c:	7cfb      	ldrb	r3, [r7, #19]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	f040 80aa 	bne.w	8000cf8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000baa:	f043 0201 	orr.w	r2, r3, #1
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f003 031f 	and.w	r3, r3, #31
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d123      	bne.n	8000c26 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	43db      	mvns	r3, r3
 8000be8:	401a      	ands	r2, r3
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3248      	adds	r2, #72	; 0x48
 8000c06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c1c:	6979      	ldr	r1, [r7, #20]
 8000c1e:	3348      	adds	r3, #72	; 0x48
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	440b      	add	r3, r1
 8000c24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d122      	bne.n	8000c74 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	431a      	orrs	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3248      	adds	r2, #72	; 0x48
 8000c54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c6a:	6979      	ldr	r1, [r7, #20]
 8000c6c:	3348      	adds	r3, #72	; 0x48
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d109      	bne.n	8000c90 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c8e:	e007      	b.n	8000ca0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d109      	bne.n	8000cbc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000cba:	e007      	b.n	8000ccc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	6a1b      	ldr	r3, [r3, #32]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d107      	bne.n	8000ce4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cea:	f023 0201 	bic.w	r2, r3, #1
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e006      	b.n	8000d06 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
  }
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	371c      	adds	r7, #28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d12e      	bne.n	8000d82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2202      	movs	r2, #2
 8000d28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0201 	bic.w	r2, r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d3c:	f7ff fa5e 	bl	80001fc <HAL_GetTick>
 8000d40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d42:	e012      	b.n	8000d6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d44:	f7ff fa5a 	bl	80001fc <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b0a      	cmp	r3, #10
 8000d50:	d90b      	bls.n	8000d6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2205      	movs	r2, #5
 8000d62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e012      	b.n	8000d90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1e5      	bne.n	8000d44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e006      	b.n	8000d90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
  }
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000db6:	7ffb      	ldrb	r3, [r7, #31]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d003      	beq.n	8000dc4 <HAL_CAN_AddTxMessage+0x2c>
 8000dbc:	7ffb      	ldrb	r3, [r7, #31]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	f040 80b8 	bne.w	8000f34 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10a      	bne.n	8000de4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d105      	bne.n	8000de4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f000 80a0 	beq.w	8000f24 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	0e1b      	lsrs	r3, r3, #24
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d907      	bls.n	8000e04 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e09e      	b.n	8000f42 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e04:	2201      	movs	r2, #1
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10d      	bne.n	8000e32 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	6809      	ldr	r1, [r1, #0]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3318      	adds	r3, #24
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	440b      	add	r3, r1
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e00f      	b.n	8000e52 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e3c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e42:	68f9      	ldr	r1, [r7, #12]
 8000e44:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e46:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3318      	adds	r3, #24
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	440b      	add	r3, r1
 8000e50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6819      	ldr	r1, [r3, #0]
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	691a      	ldr	r2, [r3, #16]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3318      	adds	r3, #24
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	440b      	add	r3, r1
 8000e62:	3304      	adds	r3, #4
 8000e64:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	7d1b      	ldrb	r3, [r3, #20]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d111      	bne.n	8000e92 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3318      	adds	r3, #24
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	4413      	add	r3, r2
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	6811      	ldr	r1, [r2, #0]
 8000e82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3318      	adds	r3, #24
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	440b      	add	r3, r1
 8000e8e:	3304      	adds	r3, #4
 8000e90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3307      	adds	r3, #7
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	061a      	lsls	r2, r3, #24
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3306      	adds	r3, #6
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	041b      	lsls	r3, r3, #16
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3305      	adds	r3, #5
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	4313      	orrs	r3, r2
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	3204      	adds	r2, #4
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	6811      	ldr	r1, [r2, #0]
 8000eba:	ea43 0200 	orr.w	r2, r3, r0
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000ec8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3303      	adds	r3, #3
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	061a      	lsls	r2, r3, #24
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	041b      	lsls	r3, r3, #16
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	4610      	mov	r0, r2
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	6811      	ldr	r1, [r2, #0]
 8000ef0:	ea43 0200 	orr.w	r2, r3, r0
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	440b      	add	r3, r1
 8000efa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000efe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3318      	adds	r3, #24
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	4413      	add	r3, r2
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	6811      	ldr	r1, [r2, #0]
 8000f12:	f043 0201 	orr.w	r2, r3, #1
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3318      	adds	r3, #24
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	440b      	add	r3, r1
 8000f1e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	e00e      	b.n	8000f42 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e006      	b.n	8000f42 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
  }
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f60:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d003      	beq.n	8000f70 <HAL_CAN_GetRxMessage+0x24>
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	f040 80f3 	bne.w	8001156 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10e      	bne.n	8000f94 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d116      	bne.n	8000fb2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e0e7      	b.n	8001164 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d107      	bne.n	8000fb2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e0d8      	b.n	8001164 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	331b      	adds	r3, #27
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	4413      	add	r3, r2
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0204 	and.w	r2, r3, #4
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10c      	bne.n	8000fea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	331b      	adds	r3, #27
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	4413      	add	r3, r2
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	0d5b      	lsrs	r3, r3, #21
 8000fe0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e00b      	b.n	8001002 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	331b      	adds	r3, #27
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4413      	add	r3, r2
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	331b      	adds	r3, #27
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4413      	add	r3, r2
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0202 	and.w	r2, r3, #2
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	331b      	adds	r3, #27
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	4413      	add	r3, r2
 8001024:	3304      	adds	r3, #4
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 020f 	and.w	r2, r3, #15
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	331b      	adds	r3, #27
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4413      	add	r3, r2
 800103c:	3304      	adds	r3, #4
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b2da      	uxtb	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	331b      	adds	r3, #27
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	4413      	add	r3, r2
 8001054:	3304      	adds	r3, #4
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0c1b      	lsrs	r3, r3, #16
 800105a:	b29a      	uxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	4413      	add	r3, r2
 800106a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	4413      	add	r3, r2
 8001080:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	0a1a      	lsrs	r2, r3, #8
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	4413      	add	r3, r2
 800109a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0c1a      	lsrs	r2, r3, #16
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3302      	adds	r3, #2
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	4413      	add	r3, r2
 80010b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	0e1a      	lsrs	r2, r3, #24
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3303      	adds	r3, #3
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3304      	adds	r3, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	4413      	add	r3, r2
 80010e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0a1a      	lsrs	r2, r3, #8
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	3305      	adds	r3, #5
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	4413      	add	r3, r2
 8001100:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	0c1a      	lsrs	r2, r3, #16
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	3306      	adds	r3, #6
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0e1a      	lsrs	r2, r3, #24
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3307      	adds	r3, #7
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d108      	bne.n	8001142 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0220 	orr.w	r2, r2, #32
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	e007      	b.n	8001152 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0220 	orr.w	r2, r2, #32
 8001150:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e006      	b.n	8001164 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
  }
}
 8001164:	4618      	mov	r0, r3
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800116e:	b480      	push	{r7}
 8001170:	b085      	sub	sp, #20
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800117e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d002      	beq.n	800118c <HAL_CAN_ActivateNotification+0x1e>
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d109      	bne.n	80011a0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6959      	ldr	r1, [r3, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	e006      	b.n	80011ae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
  }
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d07c      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d023      	beq.n	8001250 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2201      	movs	r2, #1
 800120e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f002 faf4 	bl	8003808 <HAL_CAN_TxMailbox0CompleteCallback>
 8001220:	e016      	b.n	8001250 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d004      	beq.n	8001236 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
 8001234:	e00c      	b.n	8001250 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
 8001248:	e002      	b.n	8001250 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f977 	bl	800153e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	2b00      	cmp	r3, #0
 8001258:	d024      	beq.n	80012a4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001262:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f953 	bl	800151a <HAL_CAN_TxMailbox1CompleteCallback>
 8001274:	e016      	b.n	80012a4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127c:	2b00      	cmp	r3, #0
 800127e:	d004      	beq.n	800128a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
 8001288:	e00c      	b.n	80012a4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
 800129c:	e002      	b.n	80012a4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f956 	bl	8001550 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d024      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f932 	bl	800152c <HAL_CAN_TxMailbox2CompleteCallback>
 80012c8:	e016      	b.n	80012f8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
 80012dc:	e00c      	b.n	80012f8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
 80012f0:	e002      	b.n	80012f8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f935 	bl	8001562 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00c      	beq.n	800131c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	2b00      	cmp	r3, #0
 800130a:	d007      	beq.n	800131c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001312:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2210      	movs	r2, #16
 800131a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d006      	beq.n	800133e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2208      	movs	r2, #8
 8001336:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f91b 	bl	8001574 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d009      	beq.n	800135c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f002 fa76 	bl	8003848 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00c      	beq.n	8001380 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001376:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2210      	movs	r2, #16
 800137e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2208      	movs	r2, #8
 800139a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f8fb 	bl	8001598 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d009      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f8e3 	bl	8001586 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	f003 0310 	and.w	r3, r3, #16
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2210      	movs	r2, #16
 80013da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f8e4 	bl	80015aa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00b      	beq.n	8001404 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2208      	movs	r2, #8
 80013fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f8dc 	bl	80015bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d075      	beq.n	80014fa <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d06c      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d008      	beq.n	8001434 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800143a:	2b00      	cmp	r3, #0
 800143c:	d008      	beq.n	8001450 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	2b00      	cmp	r3, #0
 8001458:	d008      	beq.n	800146c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001472:	2b00      	cmp	r3, #0
 8001474:	d03d      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800147c:	2b00      	cmp	r3, #0
 800147e:	d038      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001486:	2b30      	cmp	r3, #48	; 0x30
 8001488:	d017      	beq.n	80014ba <HAL_CAN_IRQHandler+0x302>
 800148a:	2b30      	cmp	r3, #48	; 0x30
 800148c:	d804      	bhi.n	8001498 <HAL_CAN_IRQHandler+0x2e0>
 800148e:	2b10      	cmp	r3, #16
 8001490:	d009      	beq.n	80014a6 <HAL_CAN_IRQHandler+0x2ee>
 8001492:	2b20      	cmp	r3, #32
 8001494:	d00c      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001496:	e024      	b.n	80014e2 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001498:	2b50      	cmp	r3, #80	; 0x50
 800149a:	d018      	beq.n	80014ce <HAL_CAN_IRQHandler+0x316>
 800149c:	2b60      	cmp	r3, #96	; 0x60
 800149e:	d01b      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x320>
 80014a0:	2b40      	cmp	r3, #64	; 0x40
 80014a2:	d00f      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x30c>
            break;
 80014a4:	e01d      	b.n	80014e2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014ae:	e018      	b.n	80014e2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	f043 0310 	orr.w	r3, r3, #16
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014b8:	e013      	b.n	80014e2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014c2:	e00e      	b.n	80014e2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014cc:	e009      	b.n	80014e2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014d6:	e004      	b.n	80014e2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014e0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	699a      	ldr	r2, [r3, #24]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014f0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2204      	movs	r2, #4
 80014f8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f85e 	bl	80015ce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4906      	ldr	r1, [pc, #24]	; (8001678 <__NVIC_EnableIRQ+0x34>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001744:	d301      	bcc.n	800174a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001746:	2301      	movs	r3, #1
 8001748:	e00f      	b.n	800176a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <SysTick_Config+0x40>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001752:	210f      	movs	r1, #15
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f7ff ff90 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <SysTick_Config+0x40>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <SysTick_Config+0x40>)
 8001764:	2207      	movs	r2, #7
 8001766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	e000e010 	.word	0xe000e010

08001778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff2d 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a0:	f7ff ff42 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ff90 	bl	80016d0 <NVIC_EncodePriority>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff5f 	bl	800167c <__NVIC_SetPriority>
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff35 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffa2 	bl	8001734 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e043      	b.n	800189a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_DMA_Init+0xa8>)
 800181a:	4413      	add	r3, r2
 800181c:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <HAL_DMA_Init+0xac>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	009a      	lsls	r2, r3, #2
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <HAL_DMA_Init+0xb0>)
 800182e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001846:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800184a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	bffdfff8 	.word	0xbffdfff8
 80018a8:	cccccccd 	.word	0xcccccccd
 80018ac:	40020000 	.word	0x40020000

080018b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_DMA_Start_IT+0x20>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e04a      	b.n	8001966 <HAL_DMA_Start_IT+0xb6>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d13a      	bne.n	8001958 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2202      	movs	r2, #2
 80018e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f9ae 	bl	8001c68 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 020e 	orr.w	r2, r2, #14
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e00f      	b.n	8001946 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0204 	bic.w	r2, r2, #4
 8001934:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 020a 	orr.w	r2, r2, #10
 8001944:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0201 	orr.w	r2, r2, #1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e005      	b.n	8001964 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001960:	2302      	movs	r3, #2
 8001962:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001964:	7dfb      	ldrb	r3, [r7, #23]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001982:	2b02      	cmp	r3, #2
 8001984:	d005      	beq.n	8001992 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2204      	movs	r2, #4
 800198a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	e051      	b.n	8001a36 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 020e 	bic.w	r2, r2, #14
 80019a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <HAL_DMA_Abort_IT+0xd0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d029      	beq.n	8001a10 <HAL_DMA_Abort_IT+0xa0>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a20      	ldr	r2, [pc, #128]	; (8001a44 <HAL_DMA_Abort_IT+0xd4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d022      	beq.n	8001a0c <HAL_DMA_Abort_IT+0x9c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a1f      	ldr	r2, [pc, #124]	; (8001a48 <HAL_DMA_Abort_IT+0xd8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d01a      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x96>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <HAL_DMA_Abort_IT+0xdc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d012      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x90>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <HAL_DMA_Abort_IT+0xe0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00a      	beq.n	80019fa <HAL_DMA_Abort_IT+0x8a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1a      	ldr	r2, [pc, #104]	; (8001a54 <HAL_DMA_Abort_IT+0xe4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d102      	bne.n	80019f4 <HAL_DMA_Abort_IT+0x84>
 80019ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019f2:	e00e      	b.n	8001a12 <HAL_DMA_Abort_IT+0xa2>
 80019f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019f8:	e00b      	b.n	8001a12 <HAL_DMA_Abort_IT+0xa2>
 80019fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fe:	e008      	b.n	8001a12 <HAL_DMA_Abort_IT+0xa2>
 8001a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a04:	e005      	b.n	8001a12 <HAL_DMA_Abort_IT+0xa2>
 8001a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0a:	e002      	b.n	8001a12 <HAL_DMA_Abort_IT+0xa2>
 8001a0c:	2310      	movs	r3, #16
 8001a0e:	e000      	b.n	8001a12 <HAL_DMA_Abort_IT+0xa2>
 8001a10:	2301      	movs	r3, #1
 8001a12:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <HAL_DMA_Abort_IT+0xe8>)
 8001a14:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	4798      	blx	r3
    } 
  }
  return status;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40020008 	.word	0x40020008
 8001a44:	4002001c 	.word	0x4002001c
 8001a48:	40020030 	.word	0x40020030
 8001a4c:	40020044 	.word	0x40020044
 8001a50:	40020058 	.word	0x40020058
 8001a54:	4002006c 	.word	0x4002006c
 8001a58:	40020000 	.word	0x40020000

08001a5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	2204      	movs	r2, #4
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d04f      	beq.n	8001b24 <HAL_DMA_IRQHandler+0xc8>
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d04a      	beq.n	8001b24 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0204 	bic.w	r2, r2, #4
 8001aaa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a66      	ldr	r2, [pc, #408]	; (8001c4c <HAL_DMA_IRQHandler+0x1f0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d029      	beq.n	8001b0a <HAL_DMA_IRQHandler+0xae>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a65      	ldr	r2, [pc, #404]	; (8001c50 <HAL_DMA_IRQHandler+0x1f4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d022      	beq.n	8001b06 <HAL_DMA_IRQHandler+0xaa>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a63      	ldr	r2, [pc, #396]	; (8001c54 <HAL_DMA_IRQHandler+0x1f8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01a      	beq.n	8001b00 <HAL_DMA_IRQHandler+0xa4>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a62      	ldr	r2, [pc, #392]	; (8001c58 <HAL_DMA_IRQHandler+0x1fc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d012      	beq.n	8001afa <HAL_DMA_IRQHandler+0x9e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a60      	ldr	r2, [pc, #384]	; (8001c5c <HAL_DMA_IRQHandler+0x200>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00a      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x98>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a5f      	ldr	r2, [pc, #380]	; (8001c60 <HAL_DMA_IRQHandler+0x204>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d102      	bne.n	8001aee <HAL_DMA_IRQHandler+0x92>
 8001ae8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aec:	e00e      	b.n	8001b0c <HAL_DMA_IRQHandler+0xb0>
 8001aee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001af2:	e00b      	b.n	8001b0c <HAL_DMA_IRQHandler+0xb0>
 8001af4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001af8:	e008      	b.n	8001b0c <HAL_DMA_IRQHandler+0xb0>
 8001afa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001afe:	e005      	b.n	8001b0c <HAL_DMA_IRQHandler+0xb0>
 8001b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b04:	e002      	b.n	8001b0c <HAL_DMA_IRQHandler+0xb0>
 8001b06:	2340      	movs	r3, #64	; 0x40
 8001b08:	e000      	b.n	8001b0c <HAL_DMA_IRQHandler+0xb0>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	4a55      	ldr	r2, [pc, #340]	; (8001c64 <HAL_DMA_IRQHandler+0x208>)
 8001b0e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8094 	beq.w	8001c42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b22:	e08e      	b.n	8001c42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2202      	movs	r2, #2
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d056      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x186>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d051      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10b      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 020a 	bic.w	r2, r2, #10
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a38      	ldr	r2, [pc, #224]	; (8001c4c <HAL_DMA_IRQHandler+0x1f0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d029      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x166>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a37      	ldr	r2, [pc, #220]	; (8001c50 <HAL_DMA_IRQHandler+0x1f4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d022      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x162>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a35      	ldr	r2, [pc, #212]	; (8001c54 <HAL_DMA_IRQHandler+0x1f8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01a      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x15c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a34      	ldr	r2, [pc, #208]	; (8001c58 <HAL_DMA_IRQHandler+0x1fc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d012      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x156>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a32      	ldr	r2, [pc, #200]	; (8001c5c <HAL_DMA_IRQHandler+0x200>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00a      	beq.n	8001bac <HAL_DMA_IRQHandler+0x150>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a31      	ldr	r2, [pc, #196]	; (8001c60 <HAL_DMA_IRQHandler+0x204>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d102      	bne.n	8001ba6 <HAL_DMA_IRQHandler+0x14a>
 8001ba0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ba4:	e00e      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x168>
 8001ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001baa:	e00b      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x168>
 8001bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb0:	e008      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x168>
 8001bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb6:	e005      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x168>
 8001bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bbc:	e002      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x168>
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	e000      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x168>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <HAL_DMA_IRQHandler+0x208>)
 8001bc6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d034      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001be0:	e02f      	b.n	8001c42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2208      	movs	r2, #8
 8001be8:	409a      	lsls	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d028      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x1e8>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d023      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 020e 	bic.w	r2, r2, #14
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	2101      	movs	r1, #1
 8001c16:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d004      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	4798      	blx	r3
    }
  }
  return;
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
}
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40020008 	.word	0x40020008
 8001c50:	4002001c 	.word	0x4002001c
 8001c54:	40020030 	.word	0x40020030
 8001c58:	40020044 	.word	0x40020044
 8001c5c:	40020058 	.word	0x40020058
 8001c60:	4002006c 	.word	0x4002006c
 8001c64:	40020000 	.word	0x40020000

08001c68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f202 	lsl.w	r2, r1, r2
 8001c84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	d108      	bne.n	8001ca8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ca6:	e007      	b.n	8001cb8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	60da      	str	r2, [r3, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b08b      	sub	sp, #44	; 0x2c
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd6:	e127      	b.n	8001f28 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	f040 8116 	bne.w	8001f22 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b12      	cmp	r3, #18
 8001cfc:	d034      	beq.n	8001d68 <HAL_GPIO_Init+0xa4>
 8001cfe:	2b12      	cmp	r3, #18
 8001d00:	d80d      	bhi.n	8001d1e <HAL_GPIO_Init+0x5a>
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d02b      	beq.n	8001d5e <HAL_GPIO_Init+0x9a>
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d804      	bhi.n	8001d14 <HAL_GPIO_Init+0x50>
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d031      	beq.n	8001d72 <HAL_GPIO_Init+0xae>
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d01c      	beq.n	8001d4c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d12:	e048      	b.n	8001da6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d043      	beq.n	8001da0 <HAL_GPIO_Init+0xdc>
 8001d18:	2b11      	cmp	r3, #17
 8001d1a:	d01b      	beq.n	8001d54 <HAL_GPIO_Init+0x90>
          break;
 8001d1c:	e043      	b.n	8001da6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d1e:	4a89      	ldr	r2, [pc, #548]	; (8001f44 <HAL_GPIO_Init+0x280>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d026      	beq.n	8001d72 <HAL_GPIO_Init+0xae>
 8001d24:	4a87      	ldr	r2, [pc, #540]	; (8001f44 <HAL_GPIO_Init+0x280>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d806      	bhi.n	8001d38 <HAL_GPIO_Init+0x74>
 8001d2a:	4a87      	ldr	r2, [pc, #540]	; (8001f48 <HAL_GPIO_Init+0x284>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d020      	beq.n	8001d72 <HAL_GPIO_Init+0xae>
 8001d30:	4a86      	ldr	r2, [pc, #536]	; (8001f4c <HAL_GPIO_Init+0x288>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01d      	beq.n	8001d72 <HAL_GPIO_Init+0xae>
          break;
 8001d36:	e036      	b.n	8001da6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d38:	4a85      	ldr	r2, [pc, #532]	; (8001f50 <HAL_GPIO_Init+0x28c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d019      	beq.n	8001d72 <HAL_GPIO_Init+0xae>
 8001d3e:	4a85      	ldr	r2, [pc, #532]	; (8001f54 <HAL_GPIO_Init+0x290>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d016      	beq.n	8001d72 <HAL_GPIO_Init+0xae>
 8001d44:	4a84      	ldr	r2, [pc, #528]	; (8001f58 <HAL_GPIO_Init+0x294>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_Init+0xae>
          break;
 8001d4a:	e02c      	b.n	8001da6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	623b      	str	r3, [r7, #32]
          break;
 8001d52:	e028      	b.n	8001da6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	623b      	str	r3, [r7, #32]
          break;
 8001d5c:	e023      	b.n	8001da6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	3308      	adds	r3, #8
 8001d64:	623b      	str	r3, [r7, #32]
          break;
 8001d66:	e01e      	b.n	8001da6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	330c      	adds	r3, #12
 8001d6e:	623b      	str	r3, [r7, #32]
          break;
 8001d70:	e019      	b.n	8001da6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d102      	bne.n	8001d80 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	623b      	str	r3, [r7, #32]
          break;
 8001d7e:	e012      	b.n	8001da6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d88:	2308      	movs	r3, #8
 8001d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	611a      	str	r2, [r3, #16]
          break;
 8001d92:	e008      	b.n	8001da6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d94:	2308      	movs	r3, #8
 8001d96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	615a      	str	r2, [r3, #20]
          break;
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
          break;
 8001da4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	2bff      	cmp	r3, #255	; 0xff
 8001daa:	d801      	bhi.n	8001db0 <HAL_GPIO_Init+0xec>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	e001      	b.n	8001db4 <HAL_GPIO_Init+0xf0>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3304      	adds	r3, #4
 8001db4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2bff      	cmp	r3, #255	; 0xff
 8001dba:	d802      	bhi.n	8001dc2 <HAL_GPIO_Init+0xfe>
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	e002      	b.n	8001dc8 <HAL_GPIO_Init+0x104>
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	3b08      	subs	r3, #8
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	210f      	movs	r1, #15
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	401a      	ands	r2, r3
 8001dda:	6a39      	ldr	r1, [r7, #32]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	431a      	orrs	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8096 	beq.w	8001f22 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001df6:	4b59      	ldr	r3, [pc, #356]	; (8001f5c <HAL_GPIO_Init+0x298>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	4a58      	ldr	r2, [pc, #352]	; (8001f5c <HAL_GPIO_Init+0x298>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6193      	str	r3, [r2, #24]
 8001e02:	4b56      	ldr	r3, [pc, #344]	; (8001f5c <HAL_GPIO_Init+0x298>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e0e:	4a54      	ldr	r2, [pc, #336]	; (8001f60 <HAL_GPIO_Init+0x29c>)
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4b      	ldr	r2, [pc, #300]	; (8001f64 <HAL_GPIO_Init+0x2a0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0x19e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4a      	ldr	r2, [pc, #296]	; (8001f68 <HAL_GPIO_Init+0x2a4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00d      	beq.n	8001e5e <HAL_GPIO_Init+0x19a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a49      	ldr	r2, [pc, #292]	; (8001f6c <HAL_GPIO_Init+0x2a8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d007      	beq.n	8001e5a <HAL_GPIO_Init+0x196>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a48      	ldr	r2, [pc, #288]	; (8001f70 <HAL_GPIO_Init+0x2ac>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_GPIO_Init+0x192>
 8001e52:	2303      	movs	r3, #3
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x1a0>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e004      	b.n	8001e64 <HAL_GPIO_Init+0x1a0>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_Init+0x1a0>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x1a0>
 8001e62:	2300      	movs	r3, #0
 8001e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e66:	f002 0203 	and.w	r2, r2, #3
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	4093      	lsls	r3, r2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e74:	493a      	ldr	r1, [pc, #232]	; (8001f60 <HAL_GPIO_Init+0x29c>)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d006      	beq.n	8001e9c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4938      	ldr	r1, [pc, #224]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
 8001e9a:	e006      	b.n	8001eaa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e9c:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4933      	ldr	r1, [pc, #204]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	492e      	ldr	r1, [pc, #184]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
 8001ec2:	e006      	b.n	8001ed2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	4929      	ldr	r1, [pc, #164]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ede:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	4924      	ldr	r1, [pc, #144]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
 8001eea:	e006      	b.n	8001efa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	491f      	ldr	r1, [pc, #124]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d006      	beq.n	8001f14 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	491a      	ldr	r1, [pc, #104]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60cb      	str	r3, [r1, #12]
 8001f12:	e006      	b.n	8001f22 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	4915      	ldr	r1, [pc, #84]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	3301      	adds	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f47f aed0 	bne.w	8001cd8 <HAL_GPIO_Init+0x14>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	372c      	adds	r7, #44	; 0x2c
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	10210000 	.word	0x10210000
 8001f48:	10110000 	.word	0x10110000
 8001f4c:	10120000 	.word	0x10120000
 8001f50:	10310000 	.word	0x10310000
 8001f54:	10320000 	.word	0x10320000
 8001f58:	10220000 	.word	0x10220000
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40010800 	.word	0x40010800
 8001f68:	40010c00 	.word	0x40010c00
 8001f6c:	40011000 	.word	0x40011000
 8001f70:	40011400 	.word	0x40011400
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	887b      	ldrh	r3, [r7, #2]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e001      	b.n	8001f9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	807b      	strh	r3, [r7, #2]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb6:	787b      	ldrb	r3, [r7, #1]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fbc:	887a      	ldrh	r2, [r7, #2]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fc2:	e003      	b.n	8001fcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	611a      	str	r2, [r3, #16]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	887b      	ldrh	r3, [r7, #2]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001ff4:	e002      	b.n	8001ffc <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	611a      	str	r2, [r3, #16]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
	...

08002008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e26c      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8087 	beq.w	8002136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002028:	4b92      	ldr	r3, [pc, #584]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b04      	cmp	r3, #4
 8002032:	d00c      	beq.n	800204e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002034:	4b8f      	ldr	r3, [pc, #572]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d112      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
 8002040:	4b8c      	ldr	r3, [pc, #560]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	4b89      	ldr	r3, [pc, #548]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d06c      	beq.n	8002134 <HAL_RCC_OscConfig+0x12c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d168      	bne.n	8002134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e246      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x76>
 8002070:	4b80      	ldr	r3, [pc, #512]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a7f      	ldr	r2, [pc, #508]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e02e      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x98>
 8002086:	4b7b      	ldr	r3, [pc, #492]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7a      	ldr	r2, [pc, #488]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b78      	ldr	r3, [pc, #480]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a77      	ldr	r2, [pc, #476]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0xbc>
 80020aa:	4b72      	ldr	r3, [pc, #456]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a71      	ldr	r2, [pc, #452]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6e      	ldr	r2, [pc, #440]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020c4:	4b6b      	ldr	r3, [pc, #428]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6a      	ldr	r2, [pc, #424]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b68      	ldr	r3, [pc, #416]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a67      	ldr	r2, [pc, #412]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7fe f88a 	bl	80001fc <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7fe f886 	bl	80001fc <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1fa      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0xe4>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe f876 	bl	80001fc <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7fe f872 	bl	80001fc <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1e6      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x10c>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d063      	beq.n	800220a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002142:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800214e:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	d11c      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
 800215a:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	4b43      	ldr	r3, [pc, #268]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e1ba      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4939      	ldr	r1, [pc, #228]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	e03a      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7fe f82b 	bl	80001fc <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7fe f827 	bl	80001fc <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e19b      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4927      	ldr	r1, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe f80a 	bl	80001fc <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7fe f806 	bl	80001fc <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e17a      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d03a      	beq.n	800228c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d019      	beq.n	8002252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_RCC_OscConfig+0x274>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7fd ffea 	bl	80001fc <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7fd ffe6 	bl	80001fc <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e15a      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f000 fada 	bl	8002804 <RCC_Delay>
 8002250:	e01c      	b.n	800228c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_OscConfig+0x274>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7fd ffd0 	bl	80001fc <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225e:	e00f      	b.n	8002280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7fd ffcc 	bl	80001fc <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d908      	bls.n	8002280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e140      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	42420000 	.word	0x42420000
 800227c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	4b9e      	ldr	r3, [pc, #632]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e9      	bne.n	8002260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a6 	beq.w	80023e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b97      	ldr	r3, [pc, #604]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b94      	ldr	r3, [pc, #592]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a93      	ldr	r2, [pc, #588]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b91      	ldr	r3, [pc, #580]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b8e      	ldr	r3, [pc, #568]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a8a      	ldr	r2, [pc, #552]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7fd ff8d 	bl	80001fc <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7fd ff89 	bl	80001fc <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b64      	cmp	r3, #100	; 0x64
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0fd      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x312>
 800230c:	4b7b      	ldr	r3, [pc, #492]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a7a      	ldr	r2, [pc, #488]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e02d      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x334>
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a75      	ldr	r2, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b73      	ldr	r3, [pc, #460]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a72      	ldr	r2, [pc, #456]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	e01c      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x356>
 8002344:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a6c      	ldr	r2, [pc, #432]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a69      	ldr	r2, [pc, #420]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800235e:	4b67      	ldr	r3, [pc, #412]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a66      	ldr	r2, [pc, #408]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4b64      	ldr	r3, [pc, #400]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a63      	ldr	r2, [pc, #396]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7fd ff3d 	bl	80001fc <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fd ff39 	bl	80001fc <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0ab      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	4b57      	ldr	r3, [pc, #348]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ee      	beq.n	8002386 <HAL_RCC_OscConfig+0x37e>
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7fd ff27 	bl	80001fc <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fd ff23 	bl	80001fc <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e095      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ee      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b48      	ldr	r3, [pc, #288]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a47      	ldr	r2, [pc, #284]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8081 	beq.w	80024f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f0:	4b42      	ldr	r3, [pc, #264]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d061      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d146      	bne.n	8002492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x4fc>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fd fef7 	bl	80001fc <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7fd fef3 	bl	80001fc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e067      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002424:	4b35      	ldr	r3, [pc, #212]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d108      	bne.n	800244c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243a:	4b30      	ldr	r3, [pc, #192]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	492d      	ldr	r1, [pc, #180]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244c:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a19      	ldr	r1, [r3, #32]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	430b      	orrs	r3, r1
 800245e:	4927      	ldr	r1, [pc, #156]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <HAL_RCC_OscConfig+0x4fc>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7fd fec7 	bl	80001fc <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002472:	f7fd fec3 	bl	80001fc <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e037      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x46a>
 8002490:	e02f      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_RCC_OscConfig+0x4fc>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fd feb0 	bl	80001fc <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fd feac 	bl	80001fc <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e020      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x498>
 80024be:	e018      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e013      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	40007000 	.word	0x40007000
 8002504:	42420060 	.word	0x42420060

08002508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0d0      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d910      	bls.n	800254c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 0207 	bic.w	r2, r3, #7
 8002532:	4965      	ldr	r1, [pc, #404]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0b8      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002564:	4b59      	ldr	r3, [pc, #356]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a58      	ldr	r2, [pc, #352]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800256e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800257c:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a52      	ldr	r2, [pc, #328]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002586:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	494d      	ldr	r1, [pc, #308]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d040      	beq.n	8002628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d115      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07f      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b41      	ldr	r3, [pc, #260]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e073      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06b      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e6:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4936      	ldr	r1, [pc, #216]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f8:	f7fd fe00 	bl	80001fc <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7fd fdfc 	bl	80001fc <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e053      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 020c 	and.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d1eb      	bne.n	8002600 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d210      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 0207 	bic.w	r2, r3, #7
 800263e:	4922      	ldr	r1, [pc, #136]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e032      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4916      	ldr	r1, [pc, #88]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	490e      	ldr	r1, [pc, #56]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002696:	f000 f821 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800269a:	4601      	mov	r1, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a8:	5cd3      	ldrb	r3, [r2, r3]
 80026aa:	fa21 f303 	lsr.w	r3, r1, r3
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1cc>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1d0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd fd5e 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08004830 	.word	0x08004830
 80026d4:	20000008 	.word	0x20000008
 80026d8:	20000000 	.word	0x20000000

080026dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	b490      	push	{r4, r7}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026e2:	4b2a      	ldr	r3, [pc, #168]	; (800278c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026e4:	1d3c      	adds	r4, r7, #4
 80026e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026ec:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b04      	cmp	r3, #4
 8002714:	d002      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x40>
 8002716:	2b08      	cmp	r3, #8
 8002718:	d003      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0x46>
 800271a:	e02d      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800271e:	623b      	str	r3, [r7, #32]
      break;
 8002720:	e02d      	b.n	800277e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	0c9b      	lsrs	r3, r3, #18
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800272e:	4413      	add	r3, r2
 8002730:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002734:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	0c5b      	lsrs	r3, r3, #17
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800274e:	4413      	add	r3, r2
 8002750:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002754:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800275a:	fb02 f203 	mul.w	r2, r2, r3
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
 8002766:	e004      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	4a0c      	ldr	r2, [pc, #48]	; (800279c <HAL_RCC_GetSysClockFreq+0xc0>)
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	623b      	str	r3, [r7, #32]
      break;
 8002776:	e002      	b.n	800277e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800277a:	623b      	str	r3, [r7, #32]
      break;
 800277c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277e:	6a3b      	ldr	r3, [r7, #32]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bc90      	pop	{r4, r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	080047e0 	.word	0x080047e0
 8002790:	080047f0 	.word	0x080047f0
 8002794:	40021000 	.word	0x40021000
 8002798:	007a1200 	.word	0x007a1200
 800279c:	003d0900 	.word	0x003d0900

080027a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a4:	4b02      	ldr	r3, [pc, #8]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	20000008 	.word	0x20000008

080027b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b8:	f7ff fff2 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027bc:	4601      	mov	r1, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4a03      	ldr	r2, [pc, #12]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000
 80027d8:	08004840 	.word	0x08004840

080027dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027e0:	f7ff ffde 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027e4:	4601      	mov	r1, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	0adb      	lsrs	r3, r3, #11
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4a03      	ldr	r2, [pc, #12]	; (8002800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	08004840 	.word	0x08004840

08002804 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <RCC_Delay+0x34>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <RCC_Delay+0x38>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0a5b      	lsrs	r3, r3, #9
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002820:	bf00      	nop
  }
  while (Delay --);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	60fa      	str	r2, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f9      	bne.n	8002820 <RCC_Delay+0x1c>
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000008 	.word	0x20000008
 800283c:	10624dd3 	.word	0x10624dd3

08002840 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d07d      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800285c:	2300      	movs	r3, #0
 800285e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002860:	4b4f      	ldr	r3, [pc, #316]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10d      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286c:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	4a4b      	ldr	r2, [pc, #300]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002876:	61d3      	str	r3, [r2, #28]
 8002878:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002884:	2301      	movs	r3, #1
 8002886:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d118      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002894:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a42      	ldr	r2, [pc, #264]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800289a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a0:	f7fd fcac 	bl	80001fc <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	e008      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a8:	f7fd fca8 	bl	80001fc <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e06d      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ba:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028c6:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d02e      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d027      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028e4:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028f4:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028fa:	4a29      	ldr	r2, [pc, #164]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d014      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fd fc77 	bl	80001fc <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fd fc73 	bl	80001fc <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e036      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ee      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4917      	ldr	r1, [pc, #92]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002942:	4313      	orrs	r3, r2
 8002944:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002956:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	490b      	ldr	r1, [pc, #44]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	d008      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4904      	ldr	r1, [pc, #16]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
 80029a8:	42420440 	.word	0x42420440

080029ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e03f      	b.n	8002a3e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f001 f97a 	bl	8003ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fb95 	bl	8003120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b088      	sub	sp, #32
 8002a4a:	af02      	add	r7, sp, #8
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	f040 8083 	bne.w	8002b6e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_UART_Transmit+0x2e>
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e07b      	b.n	8002b70 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_UART_Transmit+0x40>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e074      	b.n	8002b70 <HAL_UART_Transmit+0x12a>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2221      	movs	r2, #33	; 0x21
 8002a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a9c:	f7fd fbae 	bl	80001fc <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	88fa      	ldrh	r2, [r7, #6]
 8002aa6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002aae:	e042      	b.n	8002b36 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac6:	d122      	bne.n	8002b0e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2180      	movs	r1, #128	; 0x80
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f9bb 	bl	8002e4e <UART_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e046      	b.n	8002b70 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3302      	adds	r3, #2
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	e017      	b.n	8002b36 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	e013      	b.n	8002b36 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2200      	movs	r2, #0
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f998 	bl	8002e4e <UART_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e023      	b.n	8002b70 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	60ba      	str	r2, [r7, #8]
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1b7      	bne.n	8002ab0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2200      	movs	r2, #0
 8002b48:	2140      	movs	r1, #64	; 0x40
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f97f 	bl	8002e4e <UART_WaitOnFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e00a      	b.n	8002b70 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e000      	b.n	8002b70 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d140      	bne.n	8002c14 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_UART_Receive_IT+0x26>
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e039      	b.n	8002c16 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_UART_Receive_IT+0x38>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e032      	b.n	8002c16 <HAL_UART_Receive_IT+0x9e>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	88fa      	ldrh	r2, [r7, #6]
 8002bc2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	88fa      	ldrh	r2, [r7, #6]
 8002bc8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2222      	movs	r2, #34	; 0x22
 8002bd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bee:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0220 	orr.w	r2, r2, #32
 8002c0e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
  }
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_UART_IRQHandler+0x52>
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f9d7 	bl	800301e <UART_Receive_IT>
      return;
 8002c70:	e0cc      	b.n	8002e0c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80ab 	beq.w	8002dd0 <HAL_UART_IRQHandler+0x1b0>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_UART_IRQHandler+0x70>
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80a0 	beq.w	8002dd0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x90>
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	f043 0201 	orr.w	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_UART_IRQHandler+0xb0>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	f043 0202 	orr.w	r2, r3, #2
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_UART_IRQHandler+0xd0>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	f043 0204 	orr.w	r2, r3, #4
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_UART_IRQHandler+0xf0>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	f043 0208 	orr.w	r2, r3, #8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d078      	beq.n	8002e0a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <HAL_UART_IRQHandler+0x112>
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f976 	bl	800301e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <HAL_UART_IRQHandler+0x13a>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d031      	beq.n	8002dbe <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8c1 	bl	8002ee2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d023      	beq.n	8002db6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d013      	beq.n	8002dae <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <HAL_UART_IRQHandler+0x1f4>)
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fdec 	bl	8001970 <HAL_DMA_Abort_IT>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d016      	beq.n	8002dcc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002da8:	4610      	mov	r0, r2
 8002daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dac:	e00e      	b.n	8002dcc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f844 	bl	8002e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db4:	e00a      	b.n	8002dcc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f840 	bl	8002e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbc:	e006      	b.n	8002dcc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f83c 	bl	8002e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002dca:	e01e      	b.n	8002e0a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dcc:	bf00      	nop
    return;
 8002dce:	e01c      	b.n	8002e0a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_UART_IRQHandler+0x1cc>
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f8ad 	bl	8002f44 <UART_Transmit_IT>
    return;
 8002dea:	e00f      	b.n	8002e0c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_UART_IRQHandler+0x1ec>
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f8f4 	bl	8002fee <UART_EndTransmit_IT>
    return;
 8002e06:	bf00      	nop
 8002e08:	e000      	b.n	8002e0c <HAL_UART_IRQHandler+0x1ec>
    return;
 8002e0a:	bf00      	nop
  }
}
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	08002f1d 	.word	0x08002f1d

08002e18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5e:	e02c      	b.n	8002eba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e66:	d028      	beq.n	8002eba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e6e:	f7fd f9c5 	bl	80001fc <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d21d      	bcs.n	8002eba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e8c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e00f      	b.n	8002eda <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	bf0c      	ite	eq
 8002eca:	2301      	moveq	r3, #1
 8002ecc:	2300      	movne	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d0c3      	beq.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ef8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff80 	bl	8002e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b21      	cmp	r3, #33	; 0x21
 8002f56:	d144      	bne.n	8002fe2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f60:	d11a      	bne.n	8002f98 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f76:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	1c9a      	adds	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	621a      	str	r2, [r3, #32]
 8002f8a:	e00e      	b.n	8002faa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	621a      	str	r2, [r3, #32]
 8002f96:	e008      	b.n	8002faa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	1c59      	adds	r1, r3, #1
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6211      	str	r1, [r2, #32]
 8002fa2:	781a      	ldrb	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10f      	bne.n	8002fde <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e000      	b.n	8002fe4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
  }
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003004:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ff02 	bl	8002e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b22      	cmp	r3, #34	; 0x22
 8003030:	d171      	bne.n	8003116 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303a:	d123      	bne.n	8003084 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10e      	bne.n	8003068 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	1c9a      	adds	r2, r3, #2
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
 8003066:	e029      	b.n	80030bc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	b29b      	uxth	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
 8003082:	e01b      	b.n	80030bc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6858      	ldr	r0, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	1c59      	adds	r1, r3, #1
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6291      	str	r1, [r2, #40]	; 0x28
 800309c:	b2c2      	uxtb	r2, r0
 800309e:	701a      	strb	r2, [r3, #0]
 80030a0:	e00c      	b.n	80030bc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	1c58      	adds	r0, r3, #1
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	6288      	str	r0, [r1, #40]	; 0x28
 80030b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4619      	mov	r1, r3
 80030ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d120      	bne.n	8003112 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0220 	bic.w	r2, r2, #32
 80030de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff fe8e 	bl	8002e2a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	e002      	b.n	8003118 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800315a:	f023 030c 	bic.w	r3, r3, #12
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	430b      	orrs	r3, r1
 8003166:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a52      	ldr	r2, [pc, #328]	; (80032cc <UART_SetConfig+0x1ac>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d14e      	bne.n	8003226 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003188:	f7ff fb28 	bl	80027dc <HAL_RCC_GetPCLK2Freq>
 800318c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009a      	lsls	r2, r3, #2
 8003198:	441a      	add	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	4a4a      	ldr	r2, [pc, #296]	; (80032d0 <UART_SetConfig+0x1b0>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	0119      	lsls	r1, r3, #4
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009a      	lsls	r2, r3, #2
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c4:	4b42      	ldr	r3, [pc, #264]	; (80032d0 <UART_SetConfig+0x1b0>)
 80031c6:	fba3 0302 	umull	r0, r3, r3, r2
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2064      	movs	r0, #100	; 0x64
 80031ce:	fb00 f303 	mul.w	r3, r0, r3
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	3332      	adds	r3, #50	; 0x32
 80031d8:	4a3d      	ldr	r2, [pc, #244]	; (80032d0 <UART_SetConfig+0x1b0>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e4:	4419      	add	r1, r3
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	009a      	lsls	r2, r3, #2
 80031f0:	441a      	add	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031fc:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <UART_SetConfig+0x1b0>)
 80031fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2064      	movs	r0, #100	; 0x64
 8003206:	fb00 f303 	mul.w	r3, r0, r3
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	3332      	adds	r3, #50	; 0x32
 8003210:	4a2f      	ldr	r2, [pc, #188]	; (80032d0 <UART_SetConfig+0x1b0>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	f003 020f 	and.w	r2, r3, #15
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	440a      	add	r2, r1
 8003222:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003224:	e04d      	b.n	80032c2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003226:	f7ff fac5 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 800322a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	009a      	lsls	r2, r3, #2
 8003236:	441a      	add	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	4a23      	ldr	r2, [pc, #140]	; (80032d0 <UART_SetConfig+0x1b0>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	0119      	lsls	r1, r3, #4
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	009a      	lsls	r2, r3, #2
 8003256:	441a      	add	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <UART_SetConfig+0x1b0>)
 8003264:	fba3 0302 	umull	r0, r3, r3, r2
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	2064      	movs	r0, #100	; 0x64
 800326c:	fb00 f303 	mul.w	r3, r0, r3
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	3332      	adds	r3, #50	; 0x32
 8003276:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <UART_SetConfig+0x1b0>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003282:	4419      	add	r1, r3
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	009a      	lsls	r2, r3, #2
 800328e:	441a      	add	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	fbb2 f2f3 	udiv	r2, r2, r3
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <UART_SetConfig+0x1b0>)
 800329c:	fba3 0302 	umull	r0, r3, r3, r2
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	2064      	movs	r0, #100	; 0x64
 80032a4:	fb00 f303 	mul.w	r3, r0, r3
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	3332      	adds	r3, #50	; 0x32
 80032ae:	4a08      	ldr	r2, [pc, #32]	; (80032d0 <UART_SetConfig+0x1b0>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	f003 020f 	and.w	r2, r3, #15
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	440a      	add	r2, r1
 80032c0:	609a      	str	r2, [r3, #8]
}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40013800 	.word	0x40013800
 80032d0:	51eb851f 	.word	0x51eb851f

080032d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d6:	b097      	sub	sp, #92	; 0x5c
 80032d8:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032da:	f7fc ff37 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032de:	f000 f8e9 	bl	80034b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032e2:	f000 fa2b 	bl	800373c <MX_GPIO_Init>
  MX_DMA_Init();
 80032e6:	f000 fa0b 	bl	8003700 <MX_DMA_Init>
  MX_ADC1_Init();
 80032ea:	f000 f93f 	bl	800356c <MX_ADC1_Init>
  MX_CAN_Init();
 80032ee:	f000 f9a7 	bl	8003640 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80032f2:	f000 f9db 	bl	80036ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);//eklendi

  sFilterConfig.FilterBank = 0;
 80032f6:	4b63      	ldr	r3, [pc, #396]	; (8003484 <main+0x1b0>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80032fc:	4b61      	ldr	r3, [pc, #388]	; (8003484 <main+0x1b0>)
 80032fe:	2200      	movs	r2, #0
 8003300:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003302:	4b60      	ldr	r3, [pc, #384]	; (8003484 <main+0x1b0>)
 8003304:	2201      	movs	r2, #1
 8003306:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8003308:	4b5e      	ldr	r3, [pc, #376]	; (8003484 <main+0x1b0>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800330e:	4b5d      	ldr	r3, [pc, #372]	; (8003484 <main+0x1b0>)
 8003310:	2200      	movs	r2, #0
 8003312:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003314:	4b5b      	ldr	r3, [pc, #364]	; (8003484 <main+0x1b0>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800331a:	4b5a      	ldr	r3, [pc, #360]	; (8003484 <main+0x1b0>)
 800331c:	2200      	movs	r2, #0
 800331e:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003320:	4b58      	ldr	r3, [pc, #352]	; (8003484 <main+0x1b0>)
 8003322:	2200      	movs	r2, #0
 8003324:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8003326:	4b57      	ldr	r3, [pc, #348]	; (8003484 <main+0x1b0>)
 8003328:	2201      	movs	r2, #1
 800332a:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800332c:	4b55      	ldr	r3, [pc, #340]	; (8003484 <main+0x1b0>)
 800332e:	220e      	movs	r2, #14
 8003330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8003332:	4954      	ldr	r1, [pc, #336]	; (8003484 <main+0x1b0>)
 8003334:	4854      	ldr	r0, [pc, #336]	; (8003488 <main+0x1b4>)
 8003336:	f7fd fc22 	bl	8000b7e <HAL_CAN_ConfigFilter>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <main+0x70>
      {
          /* Filter configuration Error */
          Error_Handler();
 8003340:	f000 fbb2 	bl	8003aa8 <Error_Handler>
      }

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8003344:	4850      	ldr	r0, [pc, #320]	; (8003488 <main+0x1b4>)
 8003346:	f7fd fce3 	bl	8000d10 <HAL_CAN_Start>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <main+0x80>
      {
          /* Start Error */
          Error_Handler();
 8003350:	f000 fbaa 	bl	8003aa8 <Error_Handler>
      }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8003354:	2103      	movs	r1, #3
 8003356:	484c      	ldr	r0, [pc, #304]	; (8003488 <main+0x1b4>)
 8003358:	f7fd ff09 	bl	800116e <HAL_CAN_ActivateNotification>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <main+0x92>
      {
          /* Notification Error */
          Error_Handler();
 8003362:	f000 fba1 	bl	8003aa8 <Error_Handler>
      }

  TxHeader.StdId = 0x321;
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <main+0x1b8>)
 8003368:	f240 3221 	movw	r2, #801	; 0x321
 800336c:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 800336e:	4b47      	ldr	r3, [pc, #284]	; (800348c <main+0x1b8>)
 8003370:	2201      	movs	r2, #1
 8003372:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8003374:	4b45      	ldr	r3, [pc, #276]	; (800348c <main+0x1b8>)
 8003376:	2200      	movs	r2, #0
 8003378:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 800337a:	4b44      	ldr	r3, [pc, #272]	; (800348c <main+0x1b8>)
 800337c:	2200      	movs	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8003380:	4b42      	ldr	r3, [pc, #264]	; (800348c <main+0x1b8>)
 8003382:	2208      	movs	r2, #8
 8003384:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8003386:	4b41      	ldr	r3, [pc, #260]	; (800348c <main+0x1b8>)
 8003388:	2200      	movs	r2, #0
 800338a:	751a      	strb	r2, [r3, #20]

  HAL_UART_Receive_IT(&huart1, in, 1);
 800338c:	2201      	movs	r2, #1
 800338e:	4940      	ldr	r1, [pc, #256]	; (8003490 <main+0x1bc>)
 8003390:	4840      	ldr	r0, [pc, #256]	; (8003494 <main+0x1c0>)
 8003392:	f7ff fbf1 	bl	8002b78 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 char tx[64];
	 batt = RxData[0];
 8003396:	4b40      	ldr	r3, [pc, #256]	; (8003498 <main+0x1c4>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b29a      	uxth	r2, r3
 800339c:	4b3f      	ldr	r3, [pc, #252]	; (800349c <main+0x1c8>)
 800339e:	801a      	strh	r2, [r3, #0]
	 control.mod = 1;
 80033a0:	4b3f      	ldr	r3, [pc, #252]	; (80034a0 <main+0x1cc>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 80033a6:	2102      	movs	r1, #2
 80033a8:	483e      	ldr	r0, [pc, #248]	; (80034a4 <main+0x1d0>)
 80033aa:	f7fe fde5 	bl	8001f78 <HAL_GPIO_ReadPin>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <main+0xe6>
		 AutoMod();
 80033b4:	f000 fa8e 	bl	80038d4 <AutoMod>
 80033b8:	e001      	b.n	80033be <main+0xea>
	 }else{
		 ManuelMod();
 80033ba:	f000 faa7 	bl	800390c <ManuelMod>
	 }

	 //AutoMod();

	 HAL_UART_Transmit(&huart1, (uint8_t*)tx, sprintf(tx, "X_1: %d Y_1: %d X_2: %d Y_2: %d angle: %d arm: %d mod: %d\n", control.valueJoyStick_X_1,control.valueJoyStick_Y_1,control.valueJoyStick_X_2,control.valueJoyStick_Y_2,control.desired_angle,control.armco,control.mod), 500);
 80033be:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <main+0x1cc>)
 80033c0:	889b      	ldrh	r3, [r3, #4]
 80033c2:	461e      	mov	r6, r3
 80033c4:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <main+0x1cc>)
 80033c6:	88db      	ldrh	r3, [r3, #6]
 80033c8:	469c      	mov	ip, r3
 80033ca:	4b35      	ldr	r3, [pc, #212]	; (80034a0 <main+0x1cc>)
 80033cc:	891b      	ldrh	r3, [r3, #8]
 80033ce:	461a      	mov	r2, r3
 80033d0:	4b33      	ldr	r3, [pc, #204]	; (80034a0 <main+0x1cc>)
 80033d2:	895b      	ldrh	r3, [r3, #10]
 80033d4:	4619      	mov	r1, r3
 80033d6:	4b32      	ldr	r3, [pc, #200]	; (80034a0 <main+0x1cc>)
 80033d8:	885b      	ldrh	r3, [r3, #2]
 80033da:	461c      	mov	r4, r3
 80033dc:	4b30      	ldr	r3, [pc, #192]	; (80034a0 <main+0x1cc>)
 80033de:	785b      	ldrb	r3, [r3, #1]
 80033e0:	461d      	mov	r5, r3
 80033e2:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <main+0x1cc>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	4638      	mov	r0, r7
 80033e8:	9304      	str	r3, [sp, #16]
 80033ea:	9503      	str	r5, [sp, #12]
 80033ec:	9402      	str	r4, [sp, #8]
 80033ee:	9101      	str	r1, [sp, #4]
 80033f0:	9200      	str	r2, [sp, #0]
 80033f2:	4663      	mov	r3, ip
 80033f4:	4632      	mov	r2, r6
 80033f6:	492c      	ldr	r1, [pc, #176]	; (80034a8 <main+0x1d4>)
 80033f8:	f000 fdd4 	bl	8003fa4 <siprintf>
 80033fc:	4603      	mov	r3, r0
 80033fe:	b29a      	uxth	r2, r3
 8003400:	4639      	mov	r1, r7
 8003402:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003406:	4823      	ldr	r0, [pc, #140]	; (8003494 <main+0x1c0>)
 8003408:	f7ff fb1d 	bl	8002a46 <HAL_UART_Transmit>


	 TxData[0] = createData(control.valueJoyStick_X_1);
 800340c:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <main+0x1cc>)
 800340e:	889b      	ldrh	r3, [r3, #4]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fb37 	bl	8003a84 <createData>
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <main+0x1d8>)
 800341c:	701a      	strb	r2, [r3, #0]
	 TxData[1] = createData(control.valueJoyStick_Y_1);
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <main+0x1cc>)
 8003420:	88db      	ldrh	r3, [r3, #6]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fb2e 	bl	8003a84 <createData>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	4b1f      	ldr	r3, [pc, #124]	; (80034ac <main+0x1d8>)
 800342e:	705a      	strb	r2, [r3, #1]
	 TxData[2] = createData(control.valueJoyStick_X_2);
 8003430:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <main+0x1cc>)
 8003432:	891b      	ldrh	r3, [r3, #8]
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fb25 	bl	8003a84 <createData>
 800343a:	4603      	mov	r3, r0
 800343c:	461a      	mov	r2, r3
 800343e:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <main+0x1d8>)
 8003440:	709a      	strb	r2, [r3, #2]
	 TxData[3] = createData(control.valueJoyStick_Y_2);
 8003442:	4b17      	ldr	r3, [pc, #92]	; (80034a0 <main+0x1cc>)
 8003444:	895b      	ldrh	r3, [r3, #10]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fb1c 	bl	8003a84 <createData>
 800344c:	4603      	mov	r3, r0
 800344e:	461a      	mov	r2, r3
 8003450:	4b16      	ldr	r3, [pc, #88]	; (80034ac <main+0x1d8>)
 8003452:	70da      	strb	r2, [r3, #3]
	 TxData[4] = createData(control.desired_angle);
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <main+0x1cc>)
 8003456:	885b      	ldrh	r3, [r3, #2]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fb13 	bl	8003a84 <createData>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <main+0x1d8>)
 8003464:	711a      	strb	r2, [r3, #4]
	 TxData[5] = control.armco;
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <main+0x1cc>)
 8003468:	785a      	ldrb	r2, [r3, #1]
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <main+0x1d8>)
 800346c:	715a      	strb	r2, [r3, #5]
	 TxData[6] = control.mod;
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <main+0x1cc>)
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <main+0x1d8>)
 8003474:	719a      	strb	r2, [r3, #6]

	 HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <main+0x1dc>)
 8003478:	4a0c      	ldr	r2, [pc, #48]	; (80034ac <main+0x1d8>)
 800347a:	4904      	ldr	r1, [pc, #16]	; (800348c <main+0x1b8>)
 800347c:	4802      	ldr	r0, [pc, #8]	; (8003488 <main+0x1b4>)
 800347e:	f7fd fc8b 	bl	8000d98 <HAL_CAN_AddTxMessage>
  {
 8003482:	e788      	b.n	8003396 <main+0xc2>
 8003484:	200000a8 	.word	0x200000a8
 8003488:	200000dc 	.word	0x200000dc
 800348c:	200001d8 	.word	0x200001d8
 8003490:	200000d0 	.word	0x200000d0
 8003494:	20000134 	.word	0x20000134
 8003498:	200001d0 	.word	0x200001d0
 800349c:	200000d8 	.word	0x200000d8
 80034a0:	2000008c 	.word	0x2000008c
 80034a4:	40010c00 	.word	0x40010c00
 80034a8:	080047f4 	.word	0x080047f4
 80034ac:	200001c0 	.word	0x200001c0
 80034b0:	200001cc 	.word	0x200001cc

080034b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b094      	sub	sp, #80	; 0x50
 80034b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034be:	2228      	movs	r2, #40	; 0x28
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fd66 	bl	8003f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	605a      	str	r2, [r3, #4]
 80034e0:	609a      	str	r2, [r3, #8]
 80034e2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80034ee:	2300      	movs	r3, #0
 80034f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034f2:	2301      	movs	r3, #1
 80034f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034f6:	2302      	movs	r3, #2
 80034f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003500:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003504:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe fd7c 	bl	8002008 <HAL_RCC_OscConfig>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003516:	f000 fac7 	bl	8003aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800351a:	230f      	movs	r3, #15
 800351c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800351e:	2302      	movs	r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800352a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800352c:	2300      	movs	r3, #0
 800352e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	2102      	movs	r1, #2
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe ffe6 	bl	8002508 <HAL_RCC_ClockConfig>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003542:	f000 fab1 	bl	8003aa8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003546:	2302      	movs	r3, #2
 8003548:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800354a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003550:	1d3b      	adds	r3, r7, #4
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff f974 	bl	8002840 <HAL_RCCEx_PeriphCLKConfig>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800355e:	f000 faa3 	bl	8003aa8 <Error_Handler>
  }
}
 8003562:	bf00      	nop
 8003564:	3750      	adds	r7, #80	; 0x50
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800357c:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <MX_ADC1_Init+0xcc>)
 800357e:	4a2f      	ldr	r2, [pc, #188]	; (800363c <MX_ADC1_Init+0xd0>)
 8003580:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003582:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <MX_ADC1_Init+0xcc>)
 8003584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003588:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800358a:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <MX_ADC1_Init+0xcc>)
 800358c:	2200      	movs	r2, #0
 800358e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003590:	4b29      	ldr	r3, [pc, #164]	; (8003638 <MX_ADC1_Init+0xcc>)
 8003592:	2200      	movs	r2, #0
 8003594:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003596:	4b28      	ldr	r3, [pc, #160]	; (8003638 <MX_ADC1_Init+0xcc>)
 8003598:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800359c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800359e:	4b26      	ldr	r3, [pc, #152]	; (8003638 <MX_ADC1_Init+0xcc>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80035a4:	4b24      	ldr	r3, [pc, #144]	; (8003638 <MX_ADC1_Init+0xcc>)
 80035a6:	2204      	movs	r2, #4
 80035a8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80035aa:	4823      	ldr	r0, [pc, #140]	; (8003638 <MX_ADC1_Init+0xcc>)
 80035ac:	f7fc fe30 	bl	8000210 <HAL_ADC_Init>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80035b6:	f000 fa77 	bl	8003aa8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80035ba:	2301      	movs	r3, #1
 80035bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035be:	2301      	movs	r3, #1
 80035c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80035c2:	2301      	movs	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	481b      	ldr	r0, [pc, #108]	; (8003638 <MX_ADC1_Init+0xcc>)
 80035cc:	f7fc fff2 	bl	80005b4 <HAL_ADC_ConfigChannel>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80035d6:	f000 fa67 	bl	8003aa8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80035da:	2302      	movs	r3, #2
 80035dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80035de:	2302      	movs	r3, #2
 80035e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4814      	ldr	r0, [pc, #80]	; (8003638 <MX_ADC1_Init+0xcc>)
 80035e8:	f7fc ffe4 	bl	80005b4 <HAL_ADC_ConfigChannel>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80035f2:	f000 fa59 	bl	8003aa8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80035f6:	2303      	movs	r3, #3
 80035f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80035fa:	2303      	movs	r3, #3
 80035fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035fe:	1d3b      	adds	r3, r7, #4
 8003600:	4619      	mov	r1, r3
 8003602:	480d      	ldr	r0, [pc, #52]	; (8003638 <MX_ADC1_Init+0xcc>)
 8003604:	f7fc ffd6 	bl	80005b4 <HAL_ADC_ConfigChannel>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800360e:	f000 fa4b 	bl	8003aa8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003612:	2304      	movs	r3, #4
 8003614:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003616:	2304      	movs	r3, #4
 8003618:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800361a:	1d3b      	adds	r3, r7, #4
 800361c:	4619      	mov	r1, r3
 800361e:	4806      	ldr	r0, [pc, #24]	; (8003638 <MX_ADC1_Init+0xcc>)
 8003620:	f7fc ffc8 	bl	80005b4 <HAL_ADC_ConfigChannel>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800362a:	f000 fa3d 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000104 	.word	0x20000104
 800363c:	40012400 	.word	0x40012400

08003640 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <MX_CAN_Init+0x64>)
 8003646:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <MX_CAN_Init+0x68>)
 8003648:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800364a:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <MX_CAN_Init+0x64>)
 800364c:	2209      	movs	r2, #9
 800364e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <MX_CAN_Init+0x64>)
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <MX_CAN_Init+0x64>)
 8003658:	2200      	movs	r2, #0
 800365a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <MX_CAN_Init+0x64>)
 800365e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003662:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003664:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <MX_CAN_Init+0x64>)
 8003666:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800366a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800366c:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <MX_CAN_Init+0x64>)
 800366e:	2200      	movs	r2, #0
 8003670:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <MX_CAN_Init+0x64>)
 8003674:	2200      	movs	r2, #0
 8003676:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <MX_CAN_Init+0x64>)
 800367a:	2200      	movs	r2, #0
 800367c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800367e:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <MX_CAN_Init+0x64>)
 8003680:	2200      	movs	r2, #0
 8003682:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003684:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <MX_CAN_Init+0x64>)
 8003686:	2200      	movs	r2, #0
 8003688:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <MX_CAN_Init+0x64>)
 800368c:	2200      	movs	r2, #0
 800368e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003690:	4804      	ldr	r0, [pc, #16]	; (80036a4 <MX_CAN_Init+0x64>)
 8003692:	f7fd f979 	bl	8000988 <HAL_CAN_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800369c:	f000 fa04 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80036a0:	bf00      	nop
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	200000dc 	.word	0x200000dc
 80036a8:	40006400 	.word	0x40006400

080036ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <MX_USART1_UART_Init+0x4c>)
 80036b2:	4a12      	ldr	r2, [pc, #72]	; (80036fc <MX_USART1_UART_Init+0x50>)
 80036b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <MX_USART1_UART_Init+0x4c>)
 80036b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036be:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <MX_USART1_UART_Init+0x4c>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <MX_USART1_UART_Init+0x4c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <MX_USART1_UART_Init+0x4c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <MX_USART1_UART_Init+0x4c>)
 80036d2:	220c      	movs	r2, #12
 80036d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <MX_USART1_UART_Init+0x4c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <MX_USART1_UART_Init+0x4c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036e2:	4805      	ldr	r0, [pc, #20]	; (80036f8 <MX_USART1_UART_Init+0x4c>)
 80036e4:	f7ff f962 	bl	80029ac <HAL_UART_Init>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80036ee:	f000 f9db 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000134 	.word	0x20000134
 80036fc:	40013800 	.word	0x40013800

08003700 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003706:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <MX_DMA_Init+0x38>)
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	4a0b      	ldr	r2, [pc, #44]	; (8003738 <MX_DMA_Init+0x38>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6153      	str	r3, [r2, #20]
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <MX_DMA_Init+0x38>)
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2100      	movs	r1, #0
 8003722:	200b      	movs	r0, #11
 8003724:	f7fe f833 	bl	800178e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003728:	200b      	movs	r0, #11
 800372a:	f7fe f84c 	bl	80017c6 <HAL_NVIC_EnableIRQ>

}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000

0800373c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003742:	f107 0310 	add.w	r3, r7, #16
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	609a      	str	r2, [r3, #8]
 800374e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003750:	4b2a      	ldr	r3, [pc, #168]	; (80037fc <MX_GPIO_Init+0xc0>)
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	4a29      	ldr	r2, [pc, #164]	; (80037fc <MX_GPIO_Init+0xc0>)
 8003756:	f043 0310 	orr.w	r3, r3, #16
 800375a:	6193      	str	r3, [r2, #24]
 800375c:	4b27      	ldr	r3, [pc, #156]	; (80037fc <MX_GPIO_Init+0xc0>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003768:	4b24      	ldr	r3, [pc, #144]	; (80037fc <MX_GPIO_Init+0xc0>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	4a23      	ldr	r2, [pc, #140]	; (80037fc <MX_GPIO_Init+0xc0>)
 800376e:	f043 0320 	orr.w	r3, r3, #32
 8003772:	6193      	str	r3, [r2, #24]
 8003774:	4b21      	ldr	r3, [pc, #132]	; (80037fc <MX_GPIO_Init+0xc0>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003780:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <MX_GPIO_Init+0xc0>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <MX_GPIO_Init+0xc0>)
 8003786:	f043 0304 	orr.w	r3, r3, #4
 800378a:	6193      	str	r3, [r2, #24]
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <MX_GPIO_Init+0xc0>)
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003798:	4b18      	ldr	r3, [pc, #96]	; (80037fc <MX_GPIO_Init+0xc0>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	4a17      	ldr	r2, [pc, #92]	; (80037fc <MX_GPIO_Init+0xc0>)
 800379e:	f043 0308 	orr.w	r3, r3, #8
 80037a2:	6193      	str	r3, [r2, #24]
 80037a4:	4b15      	ldr	r3, [pc, #84]	; (80037fc <MX_GPIO_Init+0xc0>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80037b0:	2200      	movs	r2, #0
 80037b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037b6:	4812      	ldr	r0, [pc, #72]	; (8003800 <MX_GPIO_Init+0xc4>)
 80037b8:	f7fe fbf5 	bl	8001fa6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80037bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c2:	2301      	movs	r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ca:	2302      	movs	r3, #2
 80037cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ce:	f107 0310 	add.w	r3, r7, #16
 80037d2:	4619      	mov	r1, r3
 80037d4:	480a      	ldr	r0, [pc, #40]	; (8003800 <MX_GPIO_Init+0xc4>)
 80037d6:	f7fe fa75 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037da:	2303      	movs	r3, #3
 80037dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e6:	f107 0310 	add.w	r3, r7, #16
 80037ea:	4619      	mov	r1, r3
 80037ec:	4805      	ldr	r0, [pc, #20]	; (8003804 <MX_GPIO_Init+0xc8>)
 80037ee:	f7fe fa69 	bl	8001cc4 <HAL_GPIO_Init>

}
 80037f2:	bf00      	nop
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
 8003800:	40011000 	.word	0x40011000
 8003804:	40010c00 	.word	0x40010c00

08003808 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	 if(HAL_GetTick() - last_time > INTERVAL)
 8003810:	f7fc fcf4 	bl	80001fc <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003820:	4293      	cmp	r3, r2
 8003822:	d909      	bls.n	8003838 <HAL_CAN_TxMailbox0CompleteCallback+0x30>
	   {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003828:	4806      	ldr	r0, [pc, #24]	; (8003844 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 800382a:	f7fe fbd4 	bl	8001fd6 <HAL_GPIO_TogglePin>
	      last_time = HAL_GetTick();
 800382e:	f7fc fce5 	bl	80001fc <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8003836:	601a      	str	r2, [r3, #0]
	   }
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200001c8 	.word	0x200001c8
 8003844:	40011000 	.word	0x40011000

08003848 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8003852:	4a0f      	ldr	r2, [pc, #60]	; (8003890 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8003854:	2100      	movs	r1, #0
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fb78 	bl	8000f4c <HAL_CAN_GetRxMessage>
    if(HAL_GetTick() - last_time > INTERVAL)
 800385c:	f7fc fcce 	bl	80001fc <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800386c:	4293      	cmp	r3, r2
 800386e:	d909      	bls.n	8003884 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
    	   {
    		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003874:	4808      	ldr	r0, [pc, #32]	; (8003898 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8003876:	f7fe fbae 	bl	8001fd6 <HAL_GPIO_TogglePin>
    	      last_time = HAL_GetTick();
 800387a:	f7fc fcbf 	bl	80001fc <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8003882:	601a      	str	r2, [r3, #0]
    	   }
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	200001d0 	.word	0x200001d0
 8003890:	200001f0 	.word	0x200001f0
 8003894:	200001c8 	.word	0x200001c8
 8003898:	40011000 	.word	0x40011000

0800389c <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max){
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	69b9      	ldr	r1, [r7, #24]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	1a8a      	subs	r2, r1, r2
 80038b6:	fb02 f203 	mul.w	r2, r2, r3
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	1acb      	subs	r3, r1, r3
 80038c0:	fb92 f2f3 	sdiv	r2, r2, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	4413      	add	r3, r2
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr
	...

080038d4 <AutoMod>:
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 char newline[2] = "\r\n";
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
}

int AutoMod(){
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0


	control.valueJoyStick_X_1=1500;
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <AutoMod+0x34>)
 80038da:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80038de:	809a      	strh	r2, [r3, #4]
    control.valueJoyStick_X_2=1500;
 80038e0:	4b09      	ldr	r3, [pc, #36]	; (8003908 <AutoMod+0x34>)
 80038e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80038e6:	811a      	strh	r2, [r3, #8]
    control.valueJoyStick_Y_1=1500;
 80038e8:	4b07      	ldr	r3, [pc, #28]	; (8003908 <AutoMod+0x34>)
 80038ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80038ee:	80da      	strh	r2, [r3, #6]
    control.valueJoyStick_Y_2=1500;
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <AutoMod+0x34>)
 80038f2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80038f6:	815a      	strh	r2, [r3, #10]
    control.desired_angle = 0;
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <AutoMod+0x34>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	805a      	strh	r2, [r3, #2]
        }

	} */


	return 1;
 80038fe:	2301      	movs	r3, #1
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr
 8003908:	2000008c 	.word	0x2000008c

0800390c <ManuelMod>:

int ManuelMod(){
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af02      	add	r7, sp, #8

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 4);
 8003912:	2204      	movs	r2, #4
 8003914:	4957      	ldr	r1, [pc, #348]	; (8003a74 <ManuelMod+0x168>)
 8003916:	4858      	ldr	r0, [pc, #352]	; (8003a78 <ManuelMod+0x16c>)
 8003918:	f7fc fd52 	bl	80003c0 <HAL_ADC_Start_DMA>

	control.valueJoyStick_X_1 = map(adc_buffer[0],580,3460,1050,1900);//sag x ekseni
 800391c:	4b55      	ldr	r3, [pc, #340]	; (8003a74 <ManuelMod+0x168>)
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f240 736c 	movw	r3, #1900	; 0x76c
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	f240 431a 	movw	r3, #1050	; 0x41a
 800392c:	f640 5284 	movw	r2, #3460	; 0xd84
 8003930:	f44f 7111 	mov.w	r1, #580	; 0x244
 8003934:	f7ff ffb2 	bl	800389c <map>
 8003938:	4603      	mov	r3, r0
 800393a:	b29a      	uxth	r2, r3
 800393c:	4b4f      	ldr	r3, [pc, #316]	; (8003a7c <ManuelMod+0x170>)
 800393e:	809a      	strh	r2, [r3, #4]
    control.valueJoyStick_Y_1 = map(adc_buffer[1],250,3400,1050,1900);//sag y ekseni
 8003940:	4b4c      	ldr	r3, [pc, #304]	; (8003a74 <ManuelMod+0x168>)
 8003942:	885b      	ldrh	r3, [r3, #2]
 8003944:	4618      	mov	r0, r3
 8003946:	f240 736c 	movw	r3, #1900	; 0x76c
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	f240 431a 	movw	r3, #1050	; 0x41a
 8003950:	f640 5248 	movw	r2, #3400	; 0xd48
 8003954:	21fa      	movs	r1, #250	; 0xfa
 8003956:	f7ff ffa1 	bl	800389c <map>
 800395a:	4603      	mov	r3, r0
 800395c:	b29a      	uxth	r2, r3
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <ManuelMod+0x170>)
 8003960:	80da      	strh	r2, [r3, #6]
	control.valueJoyStick_X_2 = map(adc_buffer[3],400,3515,1050,1900);//sol y ekseni
 8003962:	4b44      	ldr	r3, [pc, #272]	; (8003a74 <ManuelMod+0x168>)
 8003964:	88db      	ldrh	r3, [r3, #6]
 8003966:	4618      	mov	r0, r3
 8003968:	f240 736c 	movw	r3, #1900	; 0x76c
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	f240 431a 	movw	r3, #1050	; 0x41a
 8003972:	f640 52bb 	movw	r2, #3515	; 0xdbb
 8003976:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800397a:	f7ff ff8f 	bl	800389c <map>
 800397e:	4603      	mov	r3, r0
 8003980:	b29a      	uxth	r2, r3
 8003982:	4b3e      	ldr	r3, [pc, #248]	; (8003a7c <ManuelMod+0x170>)
 8003984:	811a      	strh	r2, [r3, #8]
	control.valueJoyStick_Y_2 = map(adc_buffer[2],340,3650,1050,1900);//sol x ekseni
 8003986:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <ManuelMod+0x168>)
 8003988:	889b      	ldrh	r3, [r3, #4]
 800398a:	4618      	mov	r0, r3
 800398c:	f240 736c 	movw	r3, #1900	; 0x76c
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	f240 431a 	movw	r3, #1050	; 0x41a
 8003996:	f640 6242 	movw	r2, #3650	; 0xe42
 800399a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800399e:	f7ff ff7d 	bl	800389c <map>
 80039a2:	4603      	mov	r3, r0
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	4b35      	ldr	r3, [pc, #212]	; (8003a7c <ManuelMod+0x170>)
 80039a8:	815a      	strh	r2, [r3, #10]
	control.desired_angle = 0; //son kod atıldı
 80039aa:	4b34      	ldr	r3, [pc, #208]	; (8003a7c <ManuelMod+0x170>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	805a      	strh	r2, [r3, #2]

	control.valueJoyStick_X_1 = 1500 + (control.valueJoyStick_X_1 - 1500)/hizBoleni;
 80039b0:	4b32      	ldr	r3, [pc, #200]	; (8003a7c <ManuelMod+0x170>)
 80039b2:	889a      	ldrh	r2, [r3, #4]
 80039b4:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <ManuelMod+0x170>)
 80039b6:	809a      	strh	r2, [r3, #4]
	control.valueJoyStick_Y_1 = 1500 + (control.valueJoyStick_Y_1 - 1500)/hizBoleni;
 80039b8:	4b30      	ldr	r3, [pc, #192]	; (8003a7c <ManuelMod+0x170>)
 80039ba:	88da      	ldrh	r2, [r3, #6]
 80039bc:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <ManuelMod+0x170>)
 80039be:	80da      	strh	r2, [r3, #6]
	control.valueJoyStick_X_2 = 1500 + (control.valueJoyStick_X_2 - 1500)/hizBoleni;
 80039c0:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <ManuelMod+0x170>)
 80039c2:	891a      	ldrh	r2, [r3, #8]
 80039c4:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <ManuelMod+0x170>)
 80039c6:	811a      	strh	r2, [r3, #8]
    control.valueJoyStick_Y_2 = 1500 + (control.valueJoyStick_Y_2 - 1500)/hizBoleni;
 80039c8:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <ManuelMod+0x170>)
 80039ca:	895a      	ldrh	r2, [r3, #10]
 80039cc:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <ManuelMod+0x170>)
 80039ce:	815a      	strh	r2, [r3, #10]

    if (control.valueJoyStick_X_1 < 1500 + sabitleme_toleransi / hizBoleni && control.valueJoyStick_X_1 > 1500 - sabitleme_toleransi / hizBoleni)
 80039d0:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <ManuelMod+0x170>)
 80039d2:	889b      	ldrh	r3, [r3, #4]
 80039d4:	f240 620d 	movw	r2, #1549	; 0x60d
 80039d8:	4293      	cmp	r3, r2
 80039da:	d809      	bhi.n	80039f0 <ManuelMod+0xe4>
 80039dc:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <ManuelMod+0x170>)
 80039de:	889b      	ldrh	r3, [r3, #4]
 80039e0:	f240 52aa 	movw	r2, #1450	; 0x5aa
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d903      	bls.n	80039f0 <ManuelMod+0xe4>
		control.valueJoyStick_X_1 = 1500;
 80039e8:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <ManuelMod+0x170>)
 80039ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80039ee:	809a      	strh	r2, [r3, #4]
	if (control.valueJoyStick_Y_1 < 1500 + sabitleme_toleransi / hizBoleni && control.valueJoyStick_Y_1 > 1500 - sabitleme_toleransi / hizBoleni)
 80039f0:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <ManuelMod+0x170>)
 80039f2:	88db      	ldrh	r3, [r3, #6]
 80039f4:	f240 620d 	movw	r2, #1549	; 0x60d
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d809      	bhi.n	8003a10 <ManuelMod+0x104>
 80039fc:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <ManuelMod+0x170>)
 80039fe:	88db      	ldrh	r3, [r3, #6]
 8003a00:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d903      	bls.n	8003a10 <ManuelMod+0x104>
		control.valueJoyStick_Y_1 = 1500;
 8003a08:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <ManuelMod+0x170>)
 8003a0a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003a0e:	80da      	strh	r2, [r3, #6]
	if (control.valueJoyStick_X_2 < 1500 + sabitleme_toleransi / hizBoleni && control.valueJoyStick_X_2 > 1500 - sabitleme_toleransi / hizBoleni)
 8003a10:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <ManuelMod+0x170>)
 8003a12:	891b      	ldrh	r3, [r3, #8]
 8003a14:	f240 620d 	movw	r2, #1549	; 0x60d
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d809      	bhi.n	8003a30 <ManuelMod+0x124>
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <ManuelMod+0x170>)
 8003a1e:	891b      	ldrh	r3, [r3, #8]
 8003a20:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d903      	bls.n	8003a30 <ManuelMod+0x124>
		control.valueJoyStick_X_2 = 1500;
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <ManuelMod+0x170>)
 8003a2a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003a2e:	811a      	strh	r2, [r3, #8]
    if (control.valueJoyStick_Y_2 < 1500 + sabitleme_toleransi / hizBoleni && control.valueJoyStick_Y_2 > 1500 - sabitleme_toleransi / hizBoleni)
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <ManuelMod+0x170>)
 8003a32:	895b      	ldrh	r3, [r3, #10]
 8003a34:	f240 620d 	movw	r2, #1549	; 0x60d
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d809      	bhi.n	8003a50 <ManuelMod+0x144>
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <ManuelMod+0x170>)
 8003a3e:	895b      	ldrh	r3, [r3, #10]
 8003a40:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d903      	bls.n	8003a50 <ManuelMod+0x144>
		control.valueJoyStick_Y_2 = 1500;
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <ManuelMod+0x170>)
 8003a4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003a4e:	815a      	strh	r2, [r3, #10]

    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 8003a50:	2101      	movs	r1, #1
 8003a52:	480b      	ldr	r0, [pc, #44]	; (8003a80 <ManuelMod+0x174>)
 8003a54:	f7fe fa90 	bl	8001f78 <HAL_GPIO_ReadPin>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <ManuelMod+0x15a>
		control.armco = 1;
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <ManuelMod+0x170>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	705a      	strb	r2, [r3, #1]
 8003a64:	e002      	b.n	8003a6c <ManuelMod+0x160>
    else
		control.armco = 0;
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <ManuelMod+0x170>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	705a      	strb	r2, [r3, #1]
	return 1;
 8003a6c:	2301      	movs	r3, #1
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	200001b8 	.word	0x200001b8
 8003a78:	20000104 	.word	0x20000104
 8003a7c:	2000008c 	.word	0x2000008c
 8003a80:	40010c00 	.word	0x40010c00

08003a84 <createData>:

uint8_t createData(uint16_t bit16data)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	80fb      	strh	r3, [r7, #6]
	return (bit16data - 1000)/4;
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	da00      	bge.n	8003a9a <createData+0x16>
 8003a98:	3303      	adds	r3, #3
 8003a9a:	109b      	asrs	r3, r3, #2
 8003a9c:	b2db      	uxtb	r3, r3
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <HAL_MspInit+0x5c>)
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <HAL_MspInit+0x5c>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6193      	str	r3, [r2, #24]
 8003ac6:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <HAL_MspInit+0x5c>)
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <HAL_MspInit+0x5c>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <HAL_MspInit+0x5c>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003adc:	61d3      	str	r3, [r2, #28]
 8003ade:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <HAL_MspInit+0x5c>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_MspInit+0x60>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <HAL_MspInit+0x60>)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40010000 	.word	0x40010000

08003b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 0310 	add.w	r3, r7, #16
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a29      	ldr	r2, [pc, #164]	; (8003bd8 <HAL_ADC_MspInit+0xc0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d14a      	bne.n	8003bce <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b38:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <HAL_ADC_MspInit+0xc4>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	4a27      	ldr	r2, [pc, #156]	; (8003bdc <HAL_ADC_MspInit+0xc4>)
 8003b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b42:	6193      	str	r3, [r2, #24]
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <HAL_ADC_MspInit+0xc4>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b50:	4b22      	ldr	r3, [pc, #136]	; (8003bdc <HAL_ADC_MspInit+0xc4>)
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	4a21      	ldr	r2, [pc, #132]	; (8003bdc <HAL_ADC_MspInit+0xc4>)
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	6193      	str	r3, [r2, #24]
 8003b5c:	4b1f      	ldr	r3, [pc, #124]	; (8003bdc <HAL_ADC_MspInit+0xc4>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8003b68:	231e      	movs	r3, #30
 8003b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b70:	f107 0310 	add.w	r3, r7, #16
 8003b74:	4619      	mov	r1, r3
 8003b76:	481a      	ldr	r0, [pc, #104]	; (8003be0 <HAL_ADC_MspInit+0xc8>)
 8003b78:	f7fe f8a4 	bl	8001cc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_ADC_MspInit+0xcc>)
 8003b7e:	4a1a      	ldr	r2, [pc, #104]	; (8003be8 <HAL_ADC_MspInit+0xd0>)
 8003b80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b82:	4b18      	ldr	r3, [pc, #96]	; (8003be4 <HAL_ADC_MspInit+0xcc>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b88:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <HAL_ADC_MspInit+0xcc>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <HAL_ADC_MspInit+0xcc>)
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <HAL_ADC_MspInit+0xcc>)
 8003b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b9c:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <HAL_ADC_MspInit+0xcc>)
 8003b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ba2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <HAL_ADC_MspInit+0xcc>)
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <HAL_ADC_MspInit+0xcc>)
 8003bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bb0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003bb2:	480c      	ldr	r0, [pc, #48]	; (8003be4 <HAL_ADC_MspInit+0xcc>)
 8003bb4:	f7fd fe22 	bl	80017fc <HAL_DMA_Init>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8003bbe:	f7ff ff73 	bl	8003aa8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <HAL_ADC_MspInit+0xcc>)
 8003bc6:	621a      	str	r2, [r3, #32]
 8003bc8:	4a06      	ldr	r2, [pc, #24]	; (8003be4 <HAL_ADC_MspInit+0xcc>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003bce:	bf00      	nop
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40012400 	.word	0x40012400
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40010800 	.word	0x40010800
 8003be4:	20000174 	.word	0x20000174
 8003be8:	40020008 	.word	0x40020008

08003bec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2d      	ldr	r2, [pc, #180]	; (8003cbc <HAL_CAN_MspInit+0xd0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d153      	bne.n	8003cb4 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003c0c:	4b2c      	ldr	r3, [pc, #176]	; (8003cc0 <HAL_CAN_MspInit+0xd4>)
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4a2b      	ldr	r2, [pc, #172]	; (8003cc0 <HAL_CAN_MspInit+0xd4>)
 8003c12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c16:	61d3      	str	r3, [r2, #28]
 8003c18:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <HAL_CAN_MspInit+0xd4>)
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c24:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <HAL_CAN_MspInit+0xd4>)
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <HAL_CAN_MspInit+0xd4>)
 8003c2a:	f043 0308 	orr.w	r3, r3, #8
 8003c2e:	6193      	str	r3, [r2, #24]
 8003c30:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <HAL_CAN_MspInit+0xd4>)
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4a:	f107 0314 	add.w	r3, r7, #20
 8003c4e:	4619      	mov	r1, r3
 8003c50:	481c      	ldr	r0, [pc, #112]	; (8003cc4 <HAL_CAN_MspInit+0xd8>)
 8003c52:	f7fe f837 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c60:	2303      	movs	r3, #3
 8003c62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c64:	f107 0314 	add.w	r3, r7, #20
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4816      	ldr	r0, [pc, #88]	; (8003cc4 <HAL_CAN_MspInit+0xd8>)
 8003c6c:	f7fe f82a 	bl	8001cc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8003c70:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <HAL_CAN_MspInit+0xdc>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8e:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <HAL_CAN_MspInit+0xdc>)
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8003c94:	2200      	movs	r2, #0
 8003c96:	2100      	movs	r1, #0
 8003c98:	2013      	movs	r0, #19
 8003c9a:	f7fd fd78 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003c9e:	2013      	movs	r0, #19
 8003ca0:	f7fd fd91 	bl	80017c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	2014      	movs	r0, #20
 8003caa:	f7fd fd70 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003cae:	2014      	movs	r0, #20
 8003cb0:	f7fd fd89 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003cb4:	bf00      	nop
 8003cb6:	3728      	adds	r7, #40	; 0x28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40006400 	.word	0x40006400
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40010c00 	.word	0x40010c00
 8003cc8:	40010000 	.word	0x40010000

08003ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <HAL_UART_MspInit+0xb4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d145      	bne.n	8003d78 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cec:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_UART_MspInit+0xb8>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	4a24      	ldr	r2, [pc, #144]	; (8003d84 <HAL_UART_MspInit+0xb8>)
 8003cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf6:	6193      	str	r3, [r2, #24]
 8003cf8:	4b22      	ldr	r3, [pc, #136]	; (8003d84 <HAL_UART_MspInit+0xb8>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d04:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <HAL_UART_MspInit+0xb8>)
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <HAL_UART_MspInit+0xb8>)
 8003d0a:	f043 0308 	orr.w	r3, r3, #8
 8003d0e:	6193      	str	r3, [r2, #24]
 8003d10:	4b1c      	ldr	r3, [pc, #112]	; (8003d84 <HAL_UART_MspInit+0xb8>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d1c:	2340      	movs	r3, #64	; 0x40
 8003d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d20:	2302      	movs	r3, #2
 8003d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d24:	2303      	movs	r3, #3
 8003d26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d28:	f107 0314 	add.w	r3, r7, #20
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4816      	ldr	r0, [pc, #88]	; (8003d88 <HAL_UART_MspInit+0xbc>)
 8003d30:	f7fd ffc8 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d40:	f107 0314 	add.w	r3, r7, #20
 8003d44:	4619      	mov	r1, r3
 8003d46:	4810      	ldr	r0, [pc, #64]	; (8003d88 <HAL_UART_MspInit+0xbc>)
 8003d48:	f7fd ffbc 	bl	8001cc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <HAL_UART_MspInit+0xc0>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <HAL_UART_MspInit+0xc0>)
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	2025      	movs	r0, #37	; 0x25
 8003d6e:	f7fd fd0e 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d72:	2025      	movs	r0, #37	; 0x25
 8003d74:	f7fd fd27 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003d78:	bf00      	nop
 8003d7a:	3728      	adds	r7, #40	; 0x28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40013800 	.word	0x40013800
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40010c00 	.word	0x40010c00
 8003d8c:	40010000 	.word	0x40010000

08003d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003da0:	e7fe      	b.n	8003da0 <HardFault_Handler+0x4>

08003da2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003da6:	e7fe      	b.n	8003da6 <MemManage_Handler+0x4>

08003da8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dac:	e7fe      	b.n	8003dac <BusFault_Handler+0x4>

08003dae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003db2:	e7fe      	b.n	8003db2 <UsageFault_Handler+0x4>

08003db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr

08003dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ddc:	f7fc f9fc 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003de0:	bf00      	nop
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003de8:	4802      	ldr	r0, [pc, #8]	; (8003df4 <DMA1_Channel1_IRQHandler+0x10>)
 8003dea:	f7fd fe37 	bl	8001a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000174 	.word	0x20000174

08003df8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003dfc:	4802      	ldr	r0, [pc, #8]	; (8003e08 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8003dfe:	f7fd f9db 	bl	80011b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	200000dc 	.word	0x200000dc

08003e0c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003e10:	4802      	ldr	r0, [pc, #8]	; (8003e1c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003e12:	f7fd f9d1 	bl	80011b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200000dc 	.word	0x200000dc

08003e20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e24:	4802      	ldr	r0, [pc, #8]	; (8003e30 <USART1_IRQHandler+0x10>)
 8003e26:	f7fe fefb 	bl	8002c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000134 	.word	0x20000134

08003e34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003e3c:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <_sbrk+0x50>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <_sbrk+0x16>
		heap_end = &end;
 8003e44:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <_sbrk+0x50>)
 8003e46:	4a10      	ldr	r2, [pc, #64]	; (8003e88 <_sbrk+0x54>)
 8003e48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <_sbrk+0x50>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <_sbrk+0x50>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	466a      	mov	r2, sp
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d907      	bls.n	8003e6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003e5e:	f000 f86f 	bl	8003f40 <__errno>
 8003e62:	4602      	mov	r2, r0
 8003e64:	230c      	movs	r3, #12
 8003e66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003e68:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6c:	e006      	b.n	8003e7c <_sbrk+0x48>
	}

	heap_end += incr;
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <_sbrk+0x50>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	4a03      	ldr	r2, [pc, #12]	; (8003e84 <_sbrk+0x50>)
 8003e78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000098 	.word	0x20000098
 8003e88:	20000210 	.word	0x20000210

08003e8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003e90:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <SystemInit+0x5c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a14      	ldr	r2, [pc, #80]	; (8003ee8 <SystemInit+0x5c>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003e9c:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <SystemInit+0x5c>)
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	4911      	ldr	r1, [pc, #68]	; (8003ee8 <SystemInit+0x5c>)
 8003ea2:	4b12      	ldr	r3, [pc, #72]	; (8003eec <SystemInit+0x60>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <SystemInit+0x5c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0e      	ldr	r2, [pc, #56]	; (8003ee8 <SystemInit+0x5c>)
 8003eae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <SystemInit+0x5c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <SystemInit+0x5c>)
 8003ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003ec4:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <SystemInit+0x5c>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <SystemInit+0x5c>)
 8003eca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003ece:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <SystemInit+0x5c>)
 8003ed2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003ed6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <SystemInit+0x64>)
 8003eda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ede:	609a      	str	r2, [r3, #8]
#endif 
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	f8ff0000 	.word	0xf8ff0000
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003ef4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003ef6:	e003      	b.n	8003f00 <LoopCopyDataInit>

08003ef8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003efa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003efc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003efe:	3104      	adds	r1, #4

08003f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003f00:	480a      	ldr	r0, [pc, #40]	; (8003f2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003f04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003f06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003f08:	d3f6      	bcc.n	8003ef8 <CopyDataInit>
  ldr r2, =_sbss
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003f0c:	e002      	b.n	8003f14 <LoopFillZerobss>

08003f0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003f0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003f10:	f842 3b04 	str.w	r3, [r2], #4

08003f14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003f14:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003f16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003f18:	d3f9      	bcc.n	8003f0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f1a:	f7ff ffb7 	bl	8003e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f1e:	f000 f815 	bl	8003f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f22:	f7ff f9d7 	bl	80032d4 <main>
  bx lr
 8003f26:	4770      	bx	lr
  ldr r3, =_sidata
 8003f28:	08004884 	.word	0x08004884
  ldr r0, =_sdata
 8003f2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003f30:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8003f34:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8003f38:	20000210 	.word	0x20000210

08003f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f3c:	e7fe      	b.n	8003f3c <ADC1_2_IRQHandler>
	...

08003f40 <__errno>:
 8003f40:	4b01      	ldr	r3, [pc, #4]	; (8003f48 <__errno+0x8>)
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	2000000c 	.word	0x2000000c

08003f4c <__libc_init_array>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	2500      	movs	r5, #0
 8003f50:	4e0c      	ldr	r6, [pc, #48]	; (8003f84 <__libc_init_array+0x38>)
 8003f52:	4c0d      	ldr	r4, [pc, #52]	; (8003f88 <__libc_init_array+0x3c>)
 8003f54:	1ba4      	subs	r4, r4, r6
 8003f56:	10a4      	asrs	r4, r4, #2
 8003f58:	42a5      	cmp	r5, r4
 8003f5a:	d109      	bne.n	8003f70 <__libc_init_array+0x24>
 8003f5c:	f000 fc34 	bl	80047c8 <_init>
 8003f60:	2500      	movs	r5, #0
 8003f62:	4e0a      	ldr	r6, [pc, #40]	; (8003f8c <__libc_init_array+0x40>)
 8003f64:	4c0a      	ldr	r4, [pc, #40]	; (8003f90 <__libc_init_array+0x44>)
 8003f66:	1ba4      	subs	r4, r4, r6
 8003f68:	10a4      	asrs	r4, r4, #2
 8003f6a:	42a5      	cmp	r5, r4
 8003f6c:	d105      	bne.n	8003f7a <__libc_init_array+0x2e>
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f74:	4798      	blx	r3
 8003f76:	3501      	adds	r5, #1
 8003f78:	e7ee      	b.n	8003f58 <__libc_init_array+0xc>
 8003f7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f7e:	4798      	blx	r3
 8003f80:	3501      	adds	r5, #1
 8003f82:	e7f2      	b.n	8003f6a <__libc_init_array+0x1e>
 8003f84:	0800487c 	.word	0x0800487c
 8003f88:	0800487c 	.word	0x0800487c
 8003f8c:	0800487c 	.word	0x0800487c
 8003f90:	08004880 	.word	0x08004880

08003f94 <memset>:
 8003f94:	4603      	mov	r3, r0
 8003f96:	4402      	add	r2, r0
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d100      	bne.n	8003f9e <memset+0xa>
 8003f9c:	4770      	bx	lr
 8003f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa2:	e7f9      	b.n	8003f98 <memset+0x4>

08003fa4 <siprintf>:
 8003fa4:	b40e      	push	{r1, r2, r3}
 8003fa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003faa:	b500      	push	{lr}
 8003fac:	b09c      	sub	sp, #112	; 0x70
 8003fae:	ab1d      	add	r3, sp, #116	; 0x74
 8003fb0:	9002      	str	r0, [sp, #8]
 8003fb2:	9006      	str	r0, [sp, #24]
 8003fb4:	9107      	str	r1, [sp, #28]
 8003fb6:	9104      	str	r1, [sp, #16]
 8003fb8:	4808      	ldr	r0, [pc, #32]	; (8003fdc <siprintf+0x38>)
 8003fba:	4909      	ldr	r1, [pc, #36]	; (8003fe0 <siprintf+0x3c>)
 8003fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fc0:	9105      	str	r1, [sp, #20]
 8003fc2:	6800      	ldr	r0, [r0, #0]
 8003fc4:	a902      	add	r1, sp, #8
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	f000 f866 	bl	8004098 <_svfiprintf_r>
 8003fcc:	2200      	movs	r2, #0
 8003fce:	9b02      	ldr	r3, [sp, #8]
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	b01c      	add	sp, #112	; 0x70
 8003fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fd8:	b003      	add	sp, #12
 8003fda:	4770      	bx	lr
 8003fdc:	2000000c 	.word	0x2000000c
 8003fe0:	ffff0208 	.word	0xffff0208

08003fe4 <__ssputs_r>:
 8003fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	688e      	ldr	r6, [r1, #8]
 8003fea:	4682      	mov	sl, r0
 8003fec:	429e      	cmp	r6, r3
 8003fee:	460c      	mov	r4, r1
 8003ff0:	4690      	mov	r8, r2
 8003ff2:	4699      	mov	r9, r3
 8003ff4:	d837      	bhi.n	8004066 <__ssputs_r+0x82>
 8003ff6:	898a      	ldrh	r2, [r1, #12]
 8003ff8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ffc:	d031      	beq.n	8004062 <__ssputs_r+0x7e>
 8003ffe:	2302      	movs	r3, #2
 8004000:	6825      	ldr	r5, [r4, #0]
 8004002:	6909      	ldr	r1, [r1, #16]
 8004004:	1a6f      	subs	r7, r5, r1
 8004006:	6965      	ldr	r5, [r4, #20]
 8004008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800400c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004010:	f109 0301 	add.w	r3, r9, #1
 8004014:	443b      	add	r3, r7
 8004016:	429d      	cmp	r5, r3
 8004018:	bf38      	it	cc
 800401a:	461d      	movcc	r5, r3
 800401c:	0553      	lsls	r3, r2, #21
 800401e:	d530      	bpl.n	8004082 <__ssputs_r+0x9e>
 8004020:	4629      	mov	r1, r5
 8004022:	f000 fb37 	bl	8004694 <_malloc_r>
 8004026:	4606      	mov	r6, r0
 8004028:	b950      	cbnz	r0, 8004040 <__ssputs_r+0x5c>
 800402a:	230c      	movs	r3, #12
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	f8ca 3000 	str.w	r3, [sl]
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800403a:	81a3      	strh	r3, [r4, #12]
 800403c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004040:	463a      	mov	r2, r7
 8004042:	6921      	ldr	r1, [r4, #16]
 8004044:	f000 fab6 	bl	80045b4 <memcpy>
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800404e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	6126      	str	r6, [r4, #16]
 8004056:	443e      	add	r6, r7
 8004058:	6026      	str	r6, [r4, #0]
 800405a:	464e      	mov	r6, r9
 800405c:	6165      	str	r5, [r4, #20]
 800405e:	1bed      	subs	r5, r5, r7
 8004060:	60a5      	str	r5, [r4, #8]
 8004062:	454e      	cmp	r6, r9
 8004064:	d900      	bls.n	8004068 <__ssputs_r+0x84>
 8004066:	464e      	mov	r6, r9
 8004068:	4632      	mov	r2, r6
 800406a:	4641      	mov	r1, r8
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	f000 faac 	bl	80045ca <memmove>
 8004072:	68a3      	ldr	r3, [r4, #8]
 8004074:	2000      	movs	r0, #0
 8004076:	1b9b      	subs	r3, r3, r6
 8004078:	60a3      	str	r3, [r4, #8]
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	441e      	add	r6, r3
 800407e:	6026      	str	r6, [r4, #0]
 8004080:	e7dc      	b.n	800403c <__ssputs_r+0x58>
 8004082:	462a      	mov	r2, r5
 8004084:	f000 fb60 	bl	8004748 <_realloc_r>
 8004088:	4606      	mov	r6, r0
 800408a:	2800      	cmp	r0, #0
 800408c:	d1e2      	bne.n	8004054 <__ssputs_r+0x70>
 800408e:	6921      	ldr	r1, [r4, #16]
 8004090:	4650      	mov	r0, sl
 8004092:	f000 fab3 	bl	80045fc <_free_r>
 8004096:	e7c8      	b.n	800402a <__ssputs_r+0x46>

08004098 <_svfiprintf_r>:
 8004098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409c:	461d      	mov	r5, r3
 800409e:	898b      	ldrh	r3, [r1, #12]
 80040a0:	b09d      	sub	sp, #116	; 0x74
 80040a2:	061f      	lsls	r7, r3, #24
 80040a4:	4680      	mov	r8, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	4616      	mov	r6, r2
 80040aa:	d50f      	bpl.n	80040cc <_svfiprintf_r+0x34>
 80040ac:	690b      	ldr	r3, [r1, #16]
 80040ae:	b96b      	cbnz	r3, 80040cc <_svfiprintf_r+0x34>
 80040b0:	2140      	movs	r1, #64	; 0x40
 80040b2:	f000 faef 	bl	8004694 <_malloc_r>
 80040b6:	6020      	str	r0, [r4, #0]
 80040b8:	6120      	str	r0, [r4, #16]
 80040ba:	b928      	cbnz	r0, 80040c8 <_svfiprintf_r+0x30>
 80040bc:	230c      	movs	r3, #12
 80040be:	f8c8 3000 	str.w	r3, [r8]
 80040c2:	f04f 30ff 	mov.w	r0, #4294967295
 80040c6:	e0c8      	b.n	800425a <_svfiprintf_r+0x1c2>
 80040c8:	2340      	movs	r3, #64	; 0x40
 80040ca:	6163      	str	r3, [r4, #20]
 80040cc:	2300      	movs	r3, #0
 80040ce:	9309      	str	r3, [sp, #36]	; 0x24
 80040d0:	2320      	movs	r3, #32
 80040d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040d6:	2330      	movs	r3, #48	; 0x30
 80040d8:	f04f 0b01 	mov.w	fp, #1
 80040dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040e0:	9503      	str	r5, [sp, #12]
 80040e2:	4637      	mov	r7, r6
 80040e4:	463d      	mov	r5, r7
 80040e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80040ea:	b10b      	cbz	r3, 80040f0 <_svfiprintf_r+0x58>
 80040ec:	2b25      	cmp	r3, #37	; 0x25
 80040ee:	d13e      	bne.n	800416e <_svfiprintf_r+0xd6>
 80040f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80040f4:	d00b      	beq.n	800410e <_svfiprintf_r+0x76>
 80040f6:	4653      	mov	r3, sl
 80040f8:	4632      	mov	r2, r6
 80040fa:	4621      	mov	r1, r4
 80040fc:	4640      	mov	r0, r8
 80040fe:	f7ff ff71 	bl	8003fe4 <__ssputs_r>
 8004102:	3001      	adds	r0, #1
 8004104:	f000 80a4 	beq.w	8004250 <_svfiprintf_r+0x1b8>
 8004108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800410a:	4453      	add	r3, sl
 800410c:	9309      	str	r3, [sp, #36]	; 0x24
 800410e:	783b      	ldrb	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 809d 	beq.w	8004250 <_svfiprintf_r+0x1b8>
 8004116:	2300      	movs	r3, #0
 8004118:	f04f 32ff 	mov.w	r2, #4294967295
 800411c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004120:	9304      	str	r3, [sp, #16]
 8004122:	9307      	str	r3, [sp, #28]
 8004124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004128:	931a      	str	r3, [sp, #104]	; 0x68
 800412a:	462f      	mov	r7, r5
 800412c:	2205      	movs	r2, #5
 800412e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004132:	4850      	ldr	r0, [pc, #320]	; (8004274 <_svfiprintf_r+0x1dc>)
 8004134:	f000 fa30 	bl	8004598 <memchr>
 8004138:	9b04      	ldr	r3, [sp, #16]
 800413a:	b9d0      	cbnz	r0, 8004172 <_svfiprintf_r+0xda>
 800413c:	06d9      	lsls	r1, r3, #27
 800413e:	bf44      	itt	mi
 8004140:	2220      	movmi	r2, #32
 8004142:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004146:	071a      	lsls	r2, r3, #28
 8004148:	bf44      	itt	mi
 800414a:	222b      	movmi	r2, #43	; 0x2b
 800414c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004150:	782a      	ldrb	r2, [r5, #0]
 8004152:	2a2a      	cmp	r2, #42	; 0x2a
 8004154:	d015      	beq.n	8004182 <_svfiprintf_r+0xea>
 8004156:	462f      	mov	r7, r5
 8004158:	2000      	movs	r0, #0
 800415a:	250a      	movs	r5, #10
 800415c:	9a07      	ldr	r2, [sp, #28]
 800415e:	4639      	mov	r1, r7
 8004160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004164:	3b30      	subs	r3, #48	; 0x30
 8004166:	2b09      	cmp	r3, #9
 8004168:	d94d      	bls.n	8004206 <_svfiprintf_r+0x16e>
 800416a:	b1b8      	cbz	r0, 800419c <_svfiprintf_r+0x104>
 800416c:	e00f      	b.n	800418e <_svfiprintf_r+0xf6>
 800416e:	462f      	mov	r7, r5
 8004170:	e7b8      	b.n	80040e4 <_svfiprintf_r+0x4c>
 8004172:	4a40      	ldr	r2, [pc, #256]	; (8004274 <_svfiprintf_r+0x1dc>)
 8004174:	463d      	mov	r5, r7
 8004176:	1a80      	subs	r0, r0, r2
 8004178:	fa0b f000 	lsl.w	r0, fp, r0
 800417c:	4318      	orrs	r0, r3
 800417e:	9004      	str	r0, [sp, #16]
 8004180:	e7d3      	b.n	800412a <_svfiprintf_r+0x92>
 8004182:	9a03      	ldr	r2, [sp, #12]
 8004184:	1d11      	adds	r1, r2, #4
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	9103      	str	r1, [sp, #12]
 800418a:	2a00      	cmp	r2, #0
 800418c:	db01      	blt.n	8004192 <_svfiprintf_r+0xfa>
 800418e:	9207      	str	r2, [sp, #28]
 8004190:	e004      	b.n	800419c <_svfiprintf_r+0x104>
 8004192:	4252      	negs	r2, r2
 8004194:	f043 0302 	orr.w	r3, r3, #2
 8004198:	9207      	str	r2, [sp, #28]
 800419a:	9304      	str	r3, [sp, #16]
 800419c:	783b      	ldrb	r3, [r7, #0]
 800419e:	2b2e      	cmp	r3, #46	; 0x2e
 80041a0:	d10c      	bne.n	80041bc <_svfiprintf_r+0x124>
 80041a2:	787b      	ldrb	r3, [r7, #1]
 80041a4:	2b2a      	cmp	r3, #42	; 0x2a
 80041a6:	d133      	bne.n	8004210 <_svfiprintf_r+0x178>
 80041a8:	9b03      	ldr	r3, [sp, #12]
 80041aa:	3702      	adds	r7, #2
 80041ac:	1d1a      	adds	r2, r3, #4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	9203      	str	r2, [sp, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bfb8      	it	lt
 80041b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80041ba:	9305      	str	r3, [sp, #20]
 80041bc:	4d2e      	ldr	r5, [pc, #184]	; (8004278 <_svfiprintf_r+0x1e0>)
 80041be:	2203      	movs	r2, #3
 80041c0:	7839      	ldrb	r1, [r7, #0]
 80041c2:	4628      	mov	r0, r5
 80041c4:	f000 f9e8 	bl	8004598 <memchr>
 80041c8:	b138      	cbz	r0, 80041da <_svfiprintf_r+0x142>
 80041ca:	2340      	movs	r3, #64	; 0x40
 80041cc:	1b40      	subs	r0, r0, r5
 80041ce:	fa03 f000 	lsl.w	r0, r3, r0
 80041d2:	9b04      	ldr	r3, [sp, #16]
 80041d4:	3701      	adds	r7, #1
 80041d6:	4303      	orrs	r3, r0
 80041d8:	9304      	str	r3, [sp, #16]
 80041da:	7839      	ldrb	r1, [r7, #0]
 80041dc:	2206      	movs	r2, #6
 80041de:	4827      	ldr	r0, [pc, #156]	; (800427c <_svfiprintf_r+0x1e4>)
 80041e0:	1c7e      	adds	r6, r7, #1
 80041e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041e6:	f000 f9d7 	bl	8004598 <memchr>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d038      	beq.n	8004260 <_svfiprintf_r+0x1c8>
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <_svfiprintf_r+0x1e8>)
 80041f0:	bb13      	cbnz	r3, 8004238 <_svfiprintf_r+0x1a0>
 80041f2:	9b03      	ldr	r3, [sp, #12]
 80041f4:	3307      	adds	r3, #7
 80041f6:	f023 0307 	bic.w	r3, r3, #7
 80041fa:	3308      	adds	r3, #8
 80041fc:	9303      	str	r3, [sp, #12]
 80041fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004200:	444b      	add	r3, r9
 8004202:	9309      	str	r3, [sp, #36]	; 0x24
 8004204:	e76d      	b.n	80040e2 <_svfiprintf_r+0x4a>
 8004206:	fb05 3202 	mla	r2, r5, r2, r3
 800420a:	2001      	movs	r0, #1
 800420c:	460f      	mov	r7, r1
 800420e:	e7a6      	b.n	800415e <_svfiprintf_r+0xc6>
 8004210:	2300      	movs	r3, #0
 8004212:	250a      	movs	r5, #10
 8004214:	4619      	mov	r1, r3
 8004216:	3701      	adds	r7, #1
 8004218:	9305      	str	r3, [sp, #20]
 800421a:	4638      	mov	r0, r7
 800421c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004220:	3a30      	subs	r2, #48	; 0x30
 8004222:	2a09      	cmp	r2, #9
 8004224:	d903      	bls.n	800422e <_svfiprintf_r+0x196>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0c8      	beq.n	80041bc <_svfiprintf_r+0x124>
 800422a:	9105      	str	r1, [sp, #20]
 800422c:	e7c6      	b.n	80041bc <_svfiprintf_r+0x124>
 800422e:	fb05 2101 	mla	r1, r5, r1, r2
 8004232:	2301      	movs	r3, #1
 8004234:	4607      	mov	r7, r0
 8004236:	e7f0      	b.n	800421a <_svfiprintf_r+0x182>
 8004238:	ab03      	add	r3, sp, #12
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	4622      	mov	r2, r4
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <_svfiprintf_r+0x1ec>)
 8004240:	a904      	add	r1, sp, #16
 8004242:	4640      	mov	r0, r8
 8004244:	f3af 8000 	nop.w
 8004248:	f1b0 3fff 	cmp.w	r0, #4294967295
 800424c:	4681      	mov	r9, r0
 800424e:	d1d6      	bne.n	80041fe <_svfiprintf_r+0x166>
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	065b      	lsls	r3, r3, #25
 8004254:	f53f af35 	bmi.w	80040c2 <_svfiprintf_r+0x2a>
 8004258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800425a:	b01d      	add	sp, #116	; 0x74
 800425c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004260:	ab03      	add	r3, sp, #12
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	4622      	mov	r2, r4
 8004266:	4b07      	ldr	r3, [pc, #28]	; (8004284 <_svfiprintf_r+0x1ec>)
 8004268:	a904      	add	r1, sp, #16
 800426a:	4640      	mov	r0, r8
 800426c:	f000 f882 	bl	8004374 <_printf_i>
 8004270:	e7ea      	b.n	8004248 <_svfiprintf_r+0x1b0>
 8004272:	bf00      	nop
 8004274:	08004848 	.word	0x08004848
 8004278:	0800484e 	.word	0x0800484e
 800427c:	08004852 	.word	0x08004852
 8004280:	00000000 	.word	0x00000000
 8004284:	08003fe5 	.word	0x08003fe5

08004288 <_printf_common>:
 8004288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	4691      	mov	r9, r2
 800428e:	461f      	mov	r7, r3
 8004290:	688a      	ldr	r2, [r1, #8]
 8004292:	690b      	ldr	r3, [r1, #16]
 8004294:	4606      	mov	r6, r0
 8004296:	4293      	cmp	r3, r2
 8004298:	bfb8      	it	lt
 800429a:	4613      	movlt	r3, r2
 800429c:	f8c9 3000 	str.w	r3, [r9]
 80042a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042a4:	460c      	mov	r4, r1
 80042a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042aa:	b112      	cbz	r2, 80042b2 <_printf_common+0x2a>
 80042ac:	3301      	adds	r3, #1
 80042ae:	f8c9 3000 	str.w	r3, [r9]
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	0699      	lsls	r1, r3, #26
 80042b6:	bf42      	ittt	mi
 80042b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80042bc:	3302      	addmi	r3, #2
 80042be:	f8c9 3000 	strmi.w	r3, [r9]
 80042c2:	6825      	ldr	r5, [r4, #0]
 80042c4:	f015 0506 	ands.w	r5, r5, #6
 80042c8:	d107      	bne.n	80042da <_printf_common+0x52>
 80042ca:	f104 0a19 	add.w	sl, r4, #25
 80042ce:	68e3      	ldr	r3, [r4, #12]
 80042d0:	f8d9 2000 	ldr.w	r2, [r9]
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	42ab      	cmp	r3, r5
 80042d8:	dc29      	bgt.n	800432e <_printf_common+0xa6>
 80042da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80042de:	6822      	ldr	r2, [r4, #0]
 80042e0:	3300      	adds	r3, #0
 80042e2:	bf18      	it	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	0692      	lsls	r2, r2, #26
 80042e8:	d42e      	bmi.n	8004348 <_printf_common+0xc0>
 80042ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042ee:	4639      	mov	r1, r7
 80042f0:	4630      	mov	r0, r6
 80042f2:	47c0      	blx	r8
 80042f4:	3001      	adds	r0, #1
 80042f6:	d021      	beq.n	800433c <_printf_common+0xb4>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	68e5      	ldr	r5, [r4, #12]
 80042fc:	f003 0306 	and.w	r3, r3, #6
 8004300:	2b04      	cmp	r3, #4
 8004302:	bf18      	it	ne
 8004304:	2500      	movne	r5, #0
 8004306:	f8d9 2000 	ldr.w	r2, [r9]
 800430a:	f04f 0900 	mov.w	r9, #0
 800430e:	bf08      	it	eq
 8004310:	1aad      	subeq	r5, r5, r2
 8004312:	68a3      	ldr	r3, [r4, #8]
 8004314:	6922      	ldr	r2, [r4, #16]
 8004316:	bf08      	it	eq
 8004318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800431c:	4293      	cmp	r3, r2
 800431e:	bfc4      	itt	gt
 8004320:	1a9b      	subgt	r3, r3, r2
 8004322:	18ed      	addgt	r5, r5, r3
 8004324:	341a      	adds	r4, #26
 8004326:	454d      	cmp	r5, r9
 8004328:	d11a      	bne.n	8004360 <_printf_common+0xd8>
 800432a:	2000      	movs	r0, #0
 800432c:	e008      	b.n	8004340 <_printf_common+0xb8>
 800432e:	2301      	movs	r3, #1
 8004330:	4652      	mov	r2, sl
 8004332:	4639      	mov	r1, r7
 8004334:	4630      	mov	r0, r6
 8004336:	47c0      	blx	r8
 8004338:	3001      	adds	r0, #1
 800433a:	d103      	bne.n	8004344 <_printf_common+0xbc>
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004344:	3501      	adds	r5, #1
 8004346:	e7c2      	b.n	80042ce <_printf_common+0x46>
 8004348:	2030      	movs	r0, #48	; 0x30
 800434a:	18e1      	adds	r1, r4, r3
 800434c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004356:	4422      	add	r2, r4
 8004358:	3302      	adds	r3, #2
 800435a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800435e:	e7c4      	b.n	80042ea <_printf_common+0x62>
 8004360:	2301      	movs	r3, #1
 8004362:	4622      	mov	r2, r4
 8004364:	4639      	mov	r1, r7
 8004366:	4630      	mov	r0, r6
 8004368:	47c0      	blx	r8
 800436a:	3001      	adds	r0, #1
 800436c:	d0e6      	beq.n	800433c <_printf_common+0xb4>
 800436e:	f109 0901 	add.w	r9, r9, #1
 8004372:	e7d8      	b.n	8004326 <_printf_common+0x9e>

08004374 <_printf_i>:
 8004374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004378:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800437c:	460c      	mov	r4, r1
 800437e:	7e09      	ldrb	r1, [r1, #24]
 8004380:	b085      	sub	sp, #20
 8004382:	296e      	cmp	r1, #110	; 0x6e
 8004384:	4617      	mov	r7, r2
 8004386:	4606      	mov	r6, r0
 8004388:	4698      	mov	r8, r3
 800438a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800438c:	f000 80b3 	beq.w	80044f6 <_printf_i+0x182>
 8004390:	d822      	bhi.n	80043d8 <_printf_i+0x64>
 8004392:	2963      	cmp	r1, #99	; 0x63
 8004394:	d036      	beq.n	8004404 <_printf_i+0x90>
 8004396:	d80a      	bhi.n	80043ae <_printf_i+0x3a>
 8004398:	2900      	cmp	r1, #0
 800439a:	f000 80b9 	beq.w	8004510 <_printf_i+0x19c>
 800439e:	2958      	cmp	r1, #88	; 0x58
 80043a0:	f000 8083 	beq.w	80044aa <_printf_i+0x136>
 80043a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80043ac:	e032      	b.n	8004414 <_printf_i+0xa0>
 80043ae:	2964      	cmp	r1, #100	; 0x64
 80043b0:	d001      	beq.n	80043b6 <_printf_i+0x42>
 80043b2:	2969      	cmp	r1, #105	; 0x69
 80043b4:	d1f6      	bne.n	80043a4 <_printf_i+0x30>
 80043b6:	6820      	ldr	r0, [r4, #0]
 80043b8:	6813      	ldr	r3, [r2, #0]
 80043ba:	0605      	lsls	r5, r0, #24
 80043bc:	f103 0104 	add.w	r1, r3, #4
 80043c0:	d52a      	bpl.n	8004418 <_printf_i+0xa4>
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6011      	str	r1, [r2, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	da03      	bge.n	80043d2 <_printf_i+0x5e>
 80043ca:	222d      	movs	r2, #45	; 0x2d
 80043cc:	425b      	negs	r3, r3
 80043ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80043d2:	486f      	ldr	r0, [pc, #444]	; (8004590 <_printf_i+0x21c>)
 80043d4:	220a      	movs	r2, #10
 80043d6:	e039      	b.n	800444c <_printf_i+0xd8>
 80043d8:	2973      	cmp	r1, #115	; 0x73
 80043da:	f000 809d 	beq.w	8004518 <_printf_i+0x1a4>
 80043de:	d808      	bhi.n	80043f2 <_printf_i+0x7e>
 80043e0:	296f      	cmp	r1, #111	; 0x6f
 80043e2:	d020      	beq.n	8004426 <_printf_i+0xb2>
 80043e4:	2970      	cmp	r1, #112	; 0x70
 80043e6:	d1dd      	bne.n	80043a4 <_printf_i+0x30>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	f043 0320 	orr.w	r3, r3, #32
 80043ee:	6023      	str	r3, [r4, #0]
 80043f0:	e003      	b.n	80043fa <_printf_i+0x86>
 80043f2:	2975      	cmp	r1, #117	; 0x75
 80043f4:	d017      	beq.n	8004426 <_printf_i+0xb2>
 80043f6:	2978      	cmp	r1, #120	; 0x78
 80043f8:	d1d4      	bne.n	80043a4 <_printf_i+0x30>
 80043fa:	2378      	movs	r3, #120	; 0x78
 80043fc:	4865      	ldr	r0, [pc, #404]	; (8004594 <_printf_i+0x220>)
 80043fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004402:	e055      	b.n	80044b0 <_printf_i+0x13c>
 8004404:	6813      	ldr	r3, [r2, #0]
 8004406:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800440a:	1d19      	adds	r1, r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6011      	str	r1, [r2, #0]
 8004410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004414:	2301      	movs	r3, #1
 8004416:	e08c      	b.n	8004532 <_printf_i+0x1be>
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800441e:	6011      	str	r1, [r2, #0]
 8004420:	bf18      	it	ne
 8004422:	b21b      	sxthne	r3, r3
 8004424:	e7cf      	b.n	80043c6 <_printf_i+0x52>
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	6825      	ldr	r5, [r4, #0]
 800442a:	1d18      	adds	r0, r3, #4
 800442c:	6010      	str	r0, [r2, #0]
 800442e:	0628      	lsls	r0, r5, #24
 8004430:	d501      	bpl.n	8004436 <_printf_i+0xc2>
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	e002      	b.n	800443c <_printf_i+0xc8>
 8004436:	0668      	lsls	r0, r5, #25
 8004438:	d5fb      	bpl.n	8004432 <_printf_i+0xbe>
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	296f      	cmp	r1, #111	; 0x6f
 800443e:	bf14      	ite	ne
 8004440:	220a      	movne	r2, #10
 8004442:	2208      	moveq	r2, #8
 8004444:	4852      	ldr	r0, [pc, #328]	; (8004590 <_printf_i+0x21c>)
 8004446:	2100      	movs	r1, #0
 8004448:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800444c:	6865      	ldr	r5, [r4, #4]
 800444e:	2d00      	cmp	r5, #0
 8004450:	60a5      	str	r5, [r4, #8]
 8004452:	f2c0 8095 	blt.w	8004580 <_printf_i+0x20c>
 8004456:	6821      	ldr	r1, [r4, #0]
 8004458:	f021 0104 	bic.w	r1, r1, #4
 800445c:	6021      	str	r1, [r4, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d13d      	bne.n	80044de <_printf_i+0x16a>
 8004462:	2d00      	cmp	r5, #0
 8004464:	f040 808e 	bne.w	8004584 <_printf_i+0x210>
 8004468:	4665      	mov	r5, ip
 800446a:	2a08      	cmp	r2, #8
 800446c:	d10b      	bne.n	8004486 <_printf_i+0x112>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	07db      	lsls	r3, r3, #31
 8004472:	d508      	bpl.n	8004486 <_printf_i+0x112>
 8004474:	6923      	ldr	r3, [r4, #16]
 8004476:	6862      	ldr	r2, [r4, #4]
 8004478:	429a      	cmp	r2, r3
 800447a:	bfde      	ittt	le
 800447c:	2330      	movle	r3, #48	; 0x30
 800447e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004482:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004486:	ebac 0305 	sub.w	r3, ip, r5
 800448a:	6123      	str	r3, [r4, #16]
 800448c:	f8cd 8000 	str.w	r8, [sp]
 8004490:	463b      	mov	r3, r7
 8004492:	aa03      	add	r2, sp, #12
 8004494:	4621      	mov	r1, r4
 8004496:	4630      	mov	r0, r6
 8004498:	f7ff fef6 	bl	8004288 <_printf_common>
 800449c:	3001      	adds	r0, #1
 800449e:	d14d      	bne.n	800453c <_printf_i+0x1c8>
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	b005      	add	sp, #20
 80044a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044aa:	4839      	ldr	r0, [pc, #228]	; (8004590 <_printf_i+0x21c>)
 80044ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80044b0:	6813      	ldr	r3, [r2, #0]
 80044b2:	6821      	ldr	r1, [r4, #0]
 80044b4:	1d1d      	adds	r5, r3, #4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6015      	str	r5, [r2, #0]
 80044ba:	060a      	lsls	r2, r1, #24
 80044bc:	d50b      	bpl.n	80044d6 <_printf_i+0x162>
 80044be:	07ca      	lsls	r2, r1, #31
 80044c0:	bf44      	itt	mi
 80044c2:	f041 0120 	orrmi.w	r1, r1, #32
 80044c6:	6021      	strmi	r1, [r4, #0]
 80044c8:	b91b      	cbnz	r3, 80044d2 <_printf_i+0x15e>
 80044ca:	6822      	ldr	r2, [r4, #0]
 80044cc:	f022 0220 	bic.w	r2, r2, #32
 80044d0:	6022      	str	r2, [r4, #0]
 80044d2:	2210      	movs	r2, #16
 80044d4:	e7b7      	b.n	8004446 <_printf_i+0xd2>
 80044d6:	064d      	lsls	r5, r1, #25
 80044d8:	bf48      	it	mi
 80044da:	b29b      	uxthmi	r3, r3
 80044dc:	e7ef      	b.n	80044be <_printf_i+0x14a>
 80044de:	4665      	mov	r5, ip
 80044e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80044e4:	fb02 3311 	mls	r3, r2, r1, r3
 80044e8:	5cc3      	ldrb	r3, [r0, r3]
 80044ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80044ee:	460b      	mov	r3, r1
 80044f0:	2900      	cmp	r1, #0
 80044f2:	d1f5      	bne.n	80044e0 <_printf_i+0x16c>
 80044f4:	e7b9      	b.n	800446a <_printf_i+0xf6>
 80044f6:	6813      	ldr	r3, [r2, #0]
 80044f8:	6825      	ldr	r5, [r4, #0]
 80044fa:	1d18      	adds	r0, r3, #4
 80044fc:	6961      	ldr	r1, [r4, #20]
 80044fe:	6010      	str	r0, [r2, #0]
 8004500:	0628      	lsls	r0, r5, #24
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	d501      	bpl.n	800450a <_printf_i+0x196>
 8004506:	6019      	str	r1, [r3, #0]
 8004508:	e002      	b.n	8004510 <_printf_i+0x19c>
 800450a:	066a      	lsls	r2, r5, #25
 800450c:	d5fb      	bpl.n	8004506 <_printf_i+0x192>
 800450e:	8019      	strh	r1, [r3, #0]
 8004510:	2300      	movs	r3, #0
 8004512:	4665      	mov	r5, ip
 8004514:	6123      	str	r3, [r4, #16]
 8004516:	e7b9      	b.n	800448c <_printf_i+0x118>
 8004518:	6813      	ldr	r3, [r2, #0]
 800451a:	1d19      	adds	r1, r3, #4
 800451c:	6011      	str	r1, [r2, #0]
 800451e:	681d      	ldr	r5, [r3, #0]
 8004520:	6862      	ldr	r2, [r4, #4]
 8004522:	2100      	movs	r1, #0
 8004524:	4628      	mov	r0, r5
 8004526:	f000 f837 	bl	8004598 <memchr>
 800452a:	b108      	cbz	r0, 8004530 <_printf_i+0x1bc>
 800452c:	1b40      	subs	r0, r0, r5
 800452e:	6060      	str	r0, [r4, #4]
 8004530:	6863      	ldr	r3, [r4, #4]
 8004532:	6123      	str	r3, [r4, #16]
 8004534:	2300      	movs	r3, #0
 8004536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800453a:	e7a7      	b.n	800448c <_printf_i+0x118>
 800453c:	6923      	ldr	r3, [r4, #16]
 800453e:	462a      	mov	r2, r5
 8004540:	4639      	mov	r1, r7
 8004542:	4630      	mov	r0, r6
 8004544:	47c0      	blx	r8
 8004546:	3001      	adds	r0, #1
 8004548:	d0aa      	beq.n	80044a0 <_printf_i+0x12c>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	079b      	lsls	r3, r3, #30
 800454e:	d413      	bmi.n	8004578 <_printf_i+0x204>
 8004550:	68e0      	ldr	r0, [r4, #12]
 8004552:	9b03      	ldr	r3, [sp, #12]
 8004554:	4298      	cmp	r0, r3
 8004556:	bfb8      	it	lt
 8004558:	4618      	movlt	r0, r3
 800455a:	e7a3      	b.n	80044a4 <_printf_i+0x130>
 800455c:	2301      	movs	r3, #1
 800455e:	464a      	mov	r2, r9
 8004560:	4639      	mov	r1, r7
 8004562:	4630      	mov	r0, r6
 8004564:	47c0      	blx	r8
 8004566:	3001      	adds	r0, #1
 8004568:	d09a      	beq.n	80044a0 <_printf_i+0x12c>
 800456a:	3501      	adds	r5, #1
 800456c:	68e3      	ldr	r3, [r4, #12]
 800456e:	9a03      	ldr	r2, [sp, #12]
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	42ab      	cmp	r3, r5
 8004574:	dcf2      	bgt.n	800455c <_printf_i+0x1e8>
 8004576:	e7eb      	b.n	8004550 <_printf_i+0x1dc>
 8004578:	2500      	movs	r5, #0
 800457a:	f104 0919 	add.w	r9, r4, #25
 800457e:	e7f5      	b.n	800456c <_printf_i+0x1f8>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ac      	bne.n	80044de <_printf_i+0x16a>
 8004584:	7803      	ldrb	r3, [r0, #0]
 8004586:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800458a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800458e:	e76c      	b.n	800446a <_printf_i+0xf6>
 8004590:	08004859 	.word	0x08004859
 8004594:	0800486a 	.word	0x0800486a

08004598 <memchr>:
 8004598:	b510      	push	{r4, lr}
 800459a:	b2c9      	uxtb	r1, r1
 800459c:	4402      	add	r2, r0
 800459e:	4290      	cmp	r0, r2
 80045a0:	4603      	mov	r3, r0
 80045a2:	d101      	bne.n	80045a8 <memchr+0x10>
 80045a4:	2300      	movs	r3, #0
 80045a6:	e003      	b.n	80045b0 <memchr+0x18>
 80045a8:	781c      	ldrb	r4, [r3, #0]
 80045aa:	3001      	adds	r0, #1
 80045ac:	428c      	cmp	r4, r1
 80045ae:	d1f6      	bne.n	800459e <memchr+0x6>
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd10      	pop	{r4, pc}

080045b4 <memcpy>:
 80045b4:	b510      	push	{r4, lr}
 80045b6:	1e43      	subs	r3, r0, #1
 80045b8:	440a      	add	r2, r1
 80045ba:	4291      	cmp	r1, r2
 80045bc:	d100      	bne.n	80045c0 <memcpy+0xc>
 80045be:	bd10      	pop	{r4, pc}
 80045c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045c8:	e7f7      	b.n	80045ba <memcpy+0x6>

080045ca <memmove>:
 80045ca:	4288      	cmp	r0, r1
 80045cc:	b510      	push	{r4, lr}
 80045ce:	eb01 0302 	add.w	r3, r1, r2
 80045d2:	d807      	bhi.n	80045e4 <memmove+0x1a>
 80045d4:	1e42      	subs	r2, r0, #1
 80045d6:	4299      	cmp	r1, r3
 80045d8:	d00a      	beq.n	80045f0 <memmove+0x26>
 80045da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80045e2:	e7f8      	b.n	80045d6 <memmove+0xc>
 80045e4:	4283      	cmp	r3, r0
 80045e6:	d9f5      	bls.n	80045d4 <memmove+0xa>
 80045e8:	1881      	adds	r1, r0, r2
 80045ea:	1ad2      	subs	r2, r2, r3
 80045ec:	42d3      	cmn	r3, r2
 80045ee:	d100      	bne.n	80045f2 <memmove+0x28>
 80045f0:	bd10      	pop	{r4, pc}
 80045f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80045fa:	e7f7      	b.n	80045ec <memmove+0x22>

080045fc <_free_r>:
 80045fc:	b538      	push	{r3, r4, r5, lr}
 80045fe:	4605      	mov	r5, r0
 8004600:	2900      	cmp	r1, #0
 8004602:	d043      	beq.n	800468c <_free_r+0x90>
 8004604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004608:	1f0c      	subs	r4, r1, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	bfb8      	it	lt
 800460e:	18e4      	addlt	r4, r4, r3
 8004610:	f000 f8d0 	bl	80047b4 <__malloc_lock>
 8004614:	4a1e      	ldr	r2, [pc, #120]	; (8004690 <_free_r+0x94>)
 8004616:	6813      	ldr	r3, [r2, #0]
 8004618:	4610      	mov	r0, r2
 800461a:	b933      	cbnz	r3, 800462a <_free_r+0x2e>
 800461c:	6063      	str	r3, [r4, #4]
 800461e:	6014      	str	r4, [r2, #0]
 8004620:	4628      	mov	r0, r5
 8004622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004626:	f000 b8c6 	b.w	80047b6 <__malloc_unlock>
 800462a:	42a3      	cmp	r3, r4
 800462c:	d90b      	bls.n	8004646 <_free_r+0x4a>
 800462e:	6821      	ldr	r1, [r4, #0]
 8004630:	1862      	adds	r2, r4, r1
 8004632:	4293      	cmp	r3, r2
 8004634:	bf01      	itttt	eq
 8004636:	681a      	ldreq	r2, [r3, #0]
 8004638:	685b      	ldreq	r3, [r3, #4]
 800463a:	1852      	addeq	r2, r2, r1
 800463c:	6022      	streq	r2, [r4, #0]
 800463e:	6063      	str	r3, [r4, #4]
 8004640:	6004      	str	r4, [r0, #0]
 8004642:	e7ed      	b.n	8004620 <_free_r+0x24>
 8004644:	4613      	mov	r3, r2
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	b10a      	cbz	r2, 800464e <_free_r+0x52>
 800464a:	42a2      	cmp	r2, r4
 800464c:	d9fa      	bls.n	8004644 <_free_r+0x48>
 800464e:	6819      	ldr	r1, [r3, #0]
 8004650:	1858      	adds	r0, r3, r1
 8004652:	42a0      	cmp	r0, r4
 8004654:	d10b      	bne.n	800466e <_free_r+0x72>
 8004656:	6820      	ldr	r0, [r4, #0]
 8004658:	4401      	add	r1, r0
 800465a:	1858      	adds	r0, r3, r1
 800465c:	4282      	cmp	r2, r0
 800465e:	6019      	str	r1, [r3, #0]
 8004660:	d1de      	bne.n	8004620 <_free_r+0x24>
 8004662:	6810      	ldr	r0, [r2, #0]
 8004664:	6852      	ldr	r2, [r2, #4]
 8004666:	4401      	add	r1, r0
 8004668:	6019      	str	r1, [r3, #0]
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	e7d8      	b.n	8004620 <_free_r+0x24>
 800466e:	d902      	bls.n	8004676 <_free_r+0x7a>
 8004670:	230c      	movs	r3, #12
 8004672:	602b      	str	r3, [r5, #0]
 8004674:	e7d4      	b.n	8004620 <_free_r+0x24>
 8004676:	6820      	ldr	r0, [r4, #0]
 8004678:	1821      	adds	r1, r4, r0
 800467a:	428a      	cmp	r2, r1
 800467c:	bf01      	itttt	eq
 800467e:	6811      	ldreq	r1, [r2, #0]
 8004680:	6852      	ldreq	r2, [r2, #4]
 8004682:	1809      	addeq	r1, r1, r0
 8004684:	6021      	streq	r1, [r4, #0]
 8004686:	6062      	str	r2, [r4, #4]
 8004688:	605c      	str	r4, [r3, #4]
 800468a:	e7c9      	b.n	8004620 <_free_r+0x24>
 800468c:	bd38      	pop	{r3, r4, r5, pc}
 800468e:	bf00      	nop
 8004690:	2000009c 	.word	0x2000009c

08004694 <_malloc_r>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	1ccd      	adds	r5, r1, #3
 8004698:	f025 0503 	bic.w	r5, r5, #3
 800469c:	3508      	adds	r5, #8
 800469e:	2d0c      	cmp	r5, #12
 80046a0:	bf38      	it	cc
 80046a2:	250c      	movcc	r5, #12
 80046a4:	2d00      	cmp	r5, #0
 80046a6:	4606      	mov	r6, r0
 80046a8:	db01      	blt.n	80046ae <_malloc_r+0x1a>
 80046aa:	42a9      	cmp	r1, r5
 80046ac:	d903      	bls.n	80046b6 <_malloc_r+0x22>
 80046ae:	230c      	movs	r3, #12
 80046b0:	6033      	str	r3, [r6, #0]
 80046b2:	2000      	movs	r0, #0
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
 80046b6:	f000 f87d 	bl	80047b4 <__malloc_lock>
 80046ba:	4a21      	ldr	r2, [pc, #132]	; (8004740 <_malloc_r+0xac>)
 80046bc:	6814      	ldr	r4, [r2, #0]
 80046be:	4621      	mov	r1, r4
 80046c0:	b991      	cbnz	r1, 80046e8 <_malloc_r+0x54>
 80046c2:	4c20      	ldr	r4, [pc, #128]	; (8004744 <_malloc_r+0xb0>)
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	b91b      	cbnz	r3, 80046d0 <_malloc_r+0x3c>
 80046c8:	4630      	mov	r0, r6
 80046ca:	f000 f863 	bl	8004794 <_sbrk_r>
 80046ce:	6020      	str	r0, [r4, #0]
 80046d0:	4629      	mov	r1, r5
 80046d2:	4630      	mov	r0, r6
 80046d4:	f000 f85e 	bl	8004794 <_sbrk_r>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d124      	bne.n	8004726 <_malloc_r+0x92>
 80046dc:	230c      	movs	r3, #12
 80046de:	4630      	mov	r0, r6
 80046e0:	6033      	str	r3, [r6, #0]
 80046e2:	f000 f868 	bl	80047b6 <__malloc_unlock>
 80046e6:	e7e4      	b.n	80046b2 <_malloc_r+0x1e>
 80046e8:	680b      	ldr	r3, [r1, #0]
 80046ea:	1b5b      	subs	r3, r3, r5
 80046ec:	d418      	bmi.n	8004720 <_malloc_r+0x8c>
 80046ee:	2b0b      	cmp	r3, #11
 80046f0:	d90f      	bls.n	8004712 <_malloc_r+0x7e>
 80046f2:	600b      	str	r3, [r1, #0]
 80046f4:	18cc      	adds	r4, r1, r3
 80046f6:	50cd      	str	r5, [r1, r3]
 80046f8:	4630      	mov	r0, r6
 80046fa:	f000 f85c 	bl	80047b6 <__malloc_unlock>
 80046fe:	f104 000b 	add.w	r0, r4, #11
 8004702:	1d23      	adds	r3, r4, #4
 8004704:	f020 0007 	bic.w	r0, r0, #7
 8004708:	1ac3      	subs	r3, r0, r3
 800470a:	d0d3      	beq.n	80046b4 <_malloc_r+0x20>
 800470c:	425a      	negs	r2, r3
 800470e:	50e2      	str	r2, [r4, r3]
 8004710:	e7d0      	b.n	80046b4 <_malloc_r+0x20>
 8004712:	684b      	ldr	r3, [r1, #4]
 8004714:	428c      	cmp	r4, r1
 8004716:	bf16      	itet	ne
 8004718:	6063      	strne	r3, [r4, #4]
 800471a:	6013      	streq	r3, [r2, #0]
 800471c:	460c      	movne	r4, r1
 800471e:	e7eb      	b.n	80046f8 <_malloc_r+0x64>
 8004720:	460c      	mov	r4, r1
 8004722:	6849      	ldr	r1, [r1, #4]
 8004724:	e7cc      	b.n	80046c0 <_malloc_r+0x2c>
 8004726:	1cc4      	adds	r4, r0, #3
 8004728:	f024 0403 	bic.w	r4, r4, #3
 800472c:	42a0      	cmp	r0, r4
 800472e:	d005      	beq.n	800473c <_malloc_r+0xa8>
 8004730:	1a21      	subs	r1, r4, r0
 8004732:	4630      	mov	r0, r6
 8004734:	f000 f82e 	bl	8004794 <_sbrk_r>
 8004738:	3001      	adds	r0, #1
 800473a:	d0cf      	beq.n	80046dc <_malloc_r+0x48>
 800473c:	6025      	str	r5, [r4, #0]
 800473e:	e7db      	b.n	80046f8 <_malloc_r+0x64>
 8004740:	2000009c 	.word	0x2000009c
 8004744:	200000a0 	.word	0x200000a0

08004748 <_realloc_r>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	4607      	mov	r7, r0
 800474c:	4614      	mov	r4, r2
 800474e:	460e      	mov	r6, r1
 8004750:	b921      	cbnz	r1, 800475c <_realloc_r+0x14>
 8004752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004756:	4611      	mov	r1, r2
 8004758:	f7ff bf9c 	b.w	8004694 <_malloc_r>
 800475c:	b922      	cbnz	r2, 8004768 <_realloc_r+0x20>
 800475e:	f7ff ff4d 	bl	80045fc <_free_r>
 8004762:	4625      	mov	r5, r4
 8004764:	4628      	mov	r0, r5
 8004766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004768:	f000 f826 	bl	80047b8 <_malloc_usable_size_r>
 800476c:	42a0      	cmp	r0, r4
 800476e:	d20f      	bcs.n	8004790 <_realloc_r+0x48>
 8004770:	4621      	mov	r1, r4
 8004772:	4638      	mov	r0, r7
 8004774:	f7ff ff8e 	bl	8004694 <_malloc_r>
 8004778:	4605      	mov	r5, r0
 800477a:	2800      	cmp	r0, #0
 800477c:	d0f2      	beq.n	8004764 <_realloc_r+0x1c>
 800477e:	4631      	mov	r1, r6
 8004780:	4622      	mov	r2, r4
 8004782:	f7ff ff17 	bl	80045b4 <memcpy>
 8004786:	4631      	mov	r1, r6
 8004788:	4638      	mov	r0, r7
 800478a:	f7ff ff37 	bl	80045fc <_free_r>
 800478e:	e7e9      	b.n	8004764 <_realloc_r+0x1c>
 8004790:	4635      	mov	r5, r6
 8004792:	e7e7      	b.n	8004764 <_realloc_r+0x1c>

08004794 <_sbrk_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	2300      	movs	r3, #0
 8004798:	4c05      	ldr	r4, [pc, #20]	; (80047b0 <_sbrk_r+0x1c>)
 800479a:	4605      	mov	r5, r0
 800479c:	4608      	mov	r0, r1
 800479e:	6023      	str	r3, [r4, #0]
 80047a0:	f7ff fb48 	bl	8003e34 <_sbrk>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d102      	bne.n	80047ae <_sbrk_r+0x1a>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	b103      	cbz	r3, 80047ae <_sbrk_r+0x1a>
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	2000020c 	.word	0x2000020c

080047b4 <__malloc_lock>:
 80047b4:	4770      	bx	lr

080047b6 <__malloc_unlock>:
 80047b6:	4770      	bx	lr

080047b8 <_malloc_usable_size_r>:
 80047b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047bc:	1f18      	subs	r0, r3, #4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	bfbc      	itt	lt
 80047c2:	580b      	ldrlt	r3, [r1, r0]
 80047c4:	18c0      	addlt	r0, r0, r3
 80047c6:	4770      	bx	lr

080047c8 <_init>:
 80047c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ca:	bf00      	nop
 80047cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ce:	bc08      	pop	{r3}
 80047d0:	469e      	mov	lr, r3
 80047d2:	4770      	bx	lr

080047d4 <_fini>:
 80047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d6:	bf00      	nop
 80047d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047da:	bc08      	pop	{r3}
 80047dc:	469e      	mov	lr, r3
 80047de:	4770      	bx	lr
